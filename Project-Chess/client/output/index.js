!function(){"use strict";class i{constructor(i,s,t="rgb(12,36,98)",h="rgb(178 189,231)"){this.can=i;let o=s;this.nx=s>5?s:8,this.ny=o<1?this.nx:o>5?o:this.nx,this.blackcolor=t,this.whitecolor=h,this.prevx=0,this.prevy=0,this.prevWidth=this.can.width,this.prevHeight=this.can.height,this.offsetL=this.can.offsetLeft,this.offsetT=this.can.offsetTop+50,this.w=this.can.width,this.h=this.can.height,this.constW=this.can.width,this.constH=this.can.height,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.board=[],this.lastMoved=[-1,-1],this.isLongP=!1,this.enPasant=!1,this.color="w",this.posKings={},this.lastPiece=e(-2,-2),this.Poses=new Set,this.isUnderCheckB=!1,this.isUnderCheckW=!1,this.isMate=!1;for(let i=0;i<this.ny;i++)this.board[i]=[];for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)this.board[this.ny-i-1][s]=(s+i)%2==1?["w",void 0]:["b",void 0]}UpdateInfo(i,s){let t=s.x,h=s.y,e=0,o=0,n=0;t<this.w&&(e=Math.ceil((this.w-t)/this.nx)),h<this.h&&(o=Math.ceil((this.h-h)/this.ny)),n=Math.max(e*this.nx,o*this.ny),0==n&&this.prevx>=0&&this.prevy>=0&&(this.w<this.constW&&t>this.w&&(e=Math.ceil((t-this.w)/this.nx)),this.h<this.constH&&h>this.h&&(o=Math.ceil((h-this.h)/this.ny)),-1!=this.prevx&&-1!=this.prevy&&(n=-Math.min(Math.max(e*this.nx,o*this.ny),Math.min(h-this.h,t-this.w)))),i.width-=n,i.height-=n,(i.width>this.constW||i.height>this.constH)&&(i.width=this.constW,i.height=this.constH),this.prevx=t-this.prevWidth,this.prevy=h-this.prevHeight,this.prevWidth=t,this.prevHeight=h,0==n&&(this.prevx=0,this.prevy=0),this.can=i,this.w=this.can.width,this.h=this.can.height,this.offsetL=this.can.offsetLeft,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.offsetT=this.can.offsetTop+50;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&(this.board[i][s][1].width=this.w/this.nx,this.board[i][s][1].height=this.h/this.ny,this.ImageAttach(this.board[i][s][1]))}DrawBoard(){let i=this.can.getContext("2d");i.beginPath();for(let s=0;s<this.ny;s++)for(let t=0;t<this.nx;t++)"b"==this.board[s][t][0][0]?i.fillStyle=this.blackcolor:i.fillStyle=this.whitecolor,i.fillRect(t*this.w/this.nx,s*this.h/this.ny,(t+1)*this.w/this.nx,(s+1)*this.h/this.ny);i.stroke()}DrawFigures(){let i=this.can.getContext("2d");i.beginPath(),this.isMate?"w"==this.color?"K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,t("./Figures/wS.png",this,e(this.posKings.w[1],this.ny-this.posKings.w[0]-1),e(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,t("./Figures/bS.png",this,e(this.posKings.b[1],this.ny-this.posKings.b[0]-1),e(this.cellSizeW))):this.isPat&&("K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&"w"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(1,2)?(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,t("./Figures/wS.png",this,e(this.posKings.w[1],this.ny-this.posKings.w[0]-1),e(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&"b"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(1,2)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,t("./Figures/bS.png",this,e(this.posKings.b[1],this.ny-this.posKings.b[0]-1),e(this.cellSizeW))));for(let s=0;s<this.ny;s++)for(let t=0;t<this.nx;t++)null!=this.board[s][t][1]&&i.drawImage(this.board[s][t][1].img,this.board[s][t][1].posx*this.cellSizeW,(this.ny-this.board[s][t][1].posy-1)*this.cellSizeH,this.board[s][t][1].width,this.board[s][t][1].height);i.stroke()}DrawBorder(){let i=this.can.getContext("2d");i.beginPath(),i.moveTo(0,0),i.lineTo(this.w,0),i.stroke(),i.moveTo(0,0),i.moveTo(this.w,0),i.lineTo(this.w,this.h),i.stroke(),i.moveTo(this.w,this.h),i.lineTo(0,this.h),i.stroke(),i.moveTo(0,this.h),i.lineTo(0,0),i.stroke()}DrawPosMoves(i,s=void 0,t="#c22958",h="#76e08c",o="#e07693"){if(null==i)return;let n=i.x,l=i.y;if(null==n||null==l||n<0||l<0||n>=this.nx||l>=this.ny)return;let r=this.can.getContext("2d");r.beginPath();let a=!1;if(this.lastPiece.x>=0&&this.lastPiece.y>=0&&this.lastPiece.x<this.nx&&this.lastPiece.y<this.ny&&n==this.lastPiece.x&&l==this.lastPiece.y?a=!0:this.Poses.clear(),this.lastPiece=e(i.x,i.y),a){let i,s,e,o;for(const n of this.Poses)"norm"==n[0]?(r.fillStyle=t,e=Math.min(this.w/this.nx,this.h/this.ny)/4,i=(n[1].x*this.w+this.w/2)/this.nx-e/2,s=(n[1].y*this.h+this.h/2)/this.ny-e/2,r.fillRect(i,s,e,e)):"eat"==n[0]?(r.fillStyle=h,e=this.w/this.nx,o=this.h/this.ny,i=n[1].x*this.w/this.nx,s=n[1].y*this.h/this.ny,r.fillRect(i,s,e,o)):"old"==n[0]&&(r.fillStyle=t,r.fillRect(n[1].x*this.w/this.nx,n[1].y*this.h/this.ny,this.w/this.nx,this.h/this.ny))}else for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)if(i==l&&s==n)r.fillStyle=t,r.fillRect(n*this.w/this.nx,l*this.h/this.ny,this.w/this.nx,this.h/this.ny),this.Poses.add(["old",e(n,l)]);else if(null!=this.board[l][n][1]&&this.canMove(n,l,s,i,!1)){let o,n,l;if(null!=this.board[i][s][1]||this.enPasant){r.fillStyle=h,l=this.w/this.nx;let t=this.h/this.ny;o=s*this.w/this.nx,n=i*this.h/this.ny,r.fillRect(o,n,l,t),this.Poses.add(["eat",e(s,i)])}else r.fillStyle=t,l=Math.min(this.w/this.nx,this.h/this.ny)/4,o=(s*this.w+this.w/2)/this.nx-l/2,n=(i*this.h+this.h/2)/this.ny-l/2,r.fillRect(o,n,l,l),this.Poses.add(["norm",e(s,i)])}if(null!=s){let i=s.x,t=s.y;if(null==i||null==t||i<0||t<0||i>=this.nx||t>=this.ny||n==i&&l==t)return;r.fillStyle=o,r.fillRect(i*this.w/this.nx,t*this.h/this.ny,this.w/this.nx,this.h/this.ny)}r.stroke()}DrawCheck(i="#f7e87dce",s="#3e3d3cce"){if(this.isUnderCheckB||this.isUnderCheckW||this.isPat){let t,h,e,o=this.can.getContext("2d");o.beginPath(),t=this.isUnderCheckB?this.posKings.b:this.posKings.w,h=t[1],e=t[0],this.isMate?o.fillStyle=s:o.fillStyle=i,this.isPat?this.isPat&&(o.fillStyle=s,t=this.posKings.b,h=t[1],e=t[0],o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),t=this.posKings.w,h=t[1],e=t[0],o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny)):o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),o.stroke()}}GetPosBoard(i,s){if("object"!=typeof i){if(null==s||null==i||s<this.offsetT||s>this.offsetT+this.w||i<this.offsetL||i>this.offsetL+this.h)return;return e(Math.floor((i-this.offsetL)/this.h*this.ny),Math.floor((s-this.offsetT)/this.w*this.nx))}if(!(null==i.x||null==i.y||i.x<this.offsetT||i.x>this.offsetT+this.w||i.y<this.offsetL||i.y>this.offsetL+this.h))return e(Math.floor((i.y-this.offsetL)/this.h*this.ny),Math.floor((i.x-this.offsetT)/this.w*this.nx))}GetPosReal(i,s){if("object"!=typeof i){if(null==s||null==i||s<0||i<0||s>=this.nx||i>=this.ny)return;return e(this.h-(i+1)*this.cellSizeH+this.offsetT,s*this.cellSizeW+this.offsetL)}if(!(null==i.x||null==i.y||i.x<0||i.y<0||i.x>=this.nx||i.y>=this.ny))return e(this.h-(i.y+1)*this.cellSizeH+this.offsetT,i.x*this.cellSizeW+this.offsetL)}GetPosRealBoard(i,s){if("object"!=typeof i){if(null==s||null==i||s<0||i<0||s>=this.ny||i>=this.nx)return;return e(this.h-(i+1)*this.cellSizeH,s*this.cellSizeW)}if(!(null==i.x||null==i.y||i.x<0||i.y<0||i.x>=this.ny||i.y>=this.nx))return e(this.h-(i.y+1)*this.cellSizeH,i.x*this.cellSizeW)}toReversed(i){return e(i.x,this.ny-i.y-1)}ImageAttach(i){try{let s=i.posx,t=this.ny-i.posy-1,h=this.GetPosRealBoard(s,t);null!=h&&1==this.board[t][s][0].length?("K"==i.name[1]&&("b"==i.name[0]?this.posKings.b=[t,s]:this.posKings.w=[t,s]),this.board[t][s][1]=i,this.board[t][s][0]+=i.name):null==h&&console.log("Something wrong in coordinates...")}catch(i){console.log(`Function: "ImageAttach": ${i}`)}}NewBoard(i){for(let s=0;s<this.ny;s++)for(let h=0;h<this.nx;h++)this.board[s][h]=[],this.board[s][h][0]=i[s][h][0],this.board[s][h][1]=void 0,this.board[s][h][0].length>1&&(this.board[s][h][1]=t(`./Figures/${this.board[s][h][0].slice(1)}.png`,this,e(h,this.ny-s-1),e(this.cellSizeW,this.cellSizeH)))}setFigures(){for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.figure(s,i)}figure(i,s){this.board[s][i][1].figure.name=this.board[s][i][1].name[1],this.board[s][i][1].figure.color=this.board[s][i][1].name[0],this.board[s][i][1].figure.ismove=!1,this.board[s][i][1].figure.isLocked=!1}checkOnMove(i,s){return null==this.board[s][i][1]}canMove(i,s,t,h,e=!0,o=!1){let n=this.board[s][i][1].figure,l=!1;if(this.enPasant=!1,n.color==this.color||o)if("P"==n.name)"w"==n.color?i==t?s==h+1?this.checkOnMove(i,h)&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0):s==h+2&&this.checkOnMove(i,h+1)&&this.checkOnMove(i,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!0),this.enPasant=!1,l=!0):t!=i-1&&t!=i+1||s==h+1&&(this.checkOnMove(t,h)||"b"!=this.board[h][t][1].name[0]?this.checkOnMove(t,s)||this.lastMoved[0]!=t||this.lastMoved[1]!=s||"P"==this.board[s][t][1].name[1]&&"b"==this.board[s][t][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.board[s][t][0]=this.board[s][t][0].slice(0,1),this.board[s][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0)):i==t?s==h-1?this.checkOnMove(i,h)&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0):s==h-2&&this.checkOnMove(i,h-1)&&this.checkOnMove(i,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!0),this.enPasant=!1,l=!0):t!=i-1&&t!=i+1||s==h-1&&(this.checkOnMove(t,h)||"w"!=this.board[h][t][1].name[0]?this.checkOnMove(t,s)||this.lastMoved[0]!=t||this.lastMoved[1]!=s||"P"==this.board[s][t][1].name[1]&&"w"==this.board[s][t][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.board[s][t][0]=this.board[s][t][0].slice(0,1),this.board[s][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0));else if("N"==n.name){let e=Math.abs(i-t),o=Math.abs(s-h);!(1==e&&2==o||2==e&&1==o)||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("R"==n.name){let e;if(i==t){e=!0;for(let t=Math.min(s,h)+1;t<Math.max(s,h);t++)if(null!=this.board[t][i][1]){e=!1;break}}else if(s==h){e=!0;for(let h=Math.min(i,t)+1;h<Math.max(i,t);h++)if(null!=this.board[s][h][1]){e=!1;break}}null==e||!e||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("B"==n.name){let e,o=t-i,n=h-s;if((o==n||o==-n)&&0!=o){e=!0;for(let t=1;t<Math.abs(o);t++)null!=this.board[s+t*Math.sign(n)][i+t*Math.sign(o)][1]&&(e=!1)}null==e||!e||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("Q"==n.name){let e;if(i==t){e=!0;for(let t=Math.min(s,h)+1;t<Math.max(s,h);t++)if(null!=this.board[t][i][1]){e=!1;break}}else if(s==h){e=!0;for(let h=Math.min(i,t)+1;h<Math.max(i,t);h++)if(null!=this.board[s][h][1]){e=!1;break}}let o,n=t-i,r=h-s;if((n==r||n==-r)&&0!=n){o=!0;for(let t=1;t<Math.abs(n);t++)null!=this.board[s+t*Math.sign(r)][i+t*Math.sign(n)][1]&&(o=!1)}!(null!=e&&e||null!=o&&o)||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("K"==n.name){let e=t-i,n=h-s;if(Math.abs(e)<=1&&Math.abs(n)<=1&&(0!=e||0!=n)&&(null==this.board[h][t][1]||this.board[h][t][1].name[0]!=this.color)){let e=this.board[s][i][1];this.board[s][i][1]=void 0,!o&&this.underCheck(t,h)||(l=!0),this.board[s][i][1]=e}}let r=!1;if(n.color==this.color&&!o){let e;e="b"==this.color?this.posKings.b:this.posKings.w;let o=e[0],n=e[1];if(i!=n||s!=o){let e=this.board[h][t][1],a=this.board[s][i][1];this.board[h][t][1]=this.board[s][i][1],this.board[s][i][1]=void 0;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name[0]!=this.color&&(this.changeColor(),this.canMove(s,i,n,o,!1,!0)&&(r=!0,l=!1),this.changeColor());this.board[s][i][1]=a,this.board[h][t][1]=e}}if(e&&l&&!r){let e;"K"==n.name&&("w"==this.color?this.posKings.w=[h,t]:this.posKings.b=[h,t]),e="w"==this.color?this.posKings.b:this.posKings.w;let o=this.board[s][i][1],l=this.board[h][t][1];if(this.board[h][t][1]=o,this.board[s][i][1]=void 0,this.canMove(t,h,e[1],e[0],!1,!0)?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckW=!1,this.isUnderCheckB=!1),!this.isUnderCheckB&&!this.isUnderCheckW)for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name[0]==this.color&&(this.canMove(s,i,e[1],e[0],!1,!0)?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckB=!1,this.isUnderCheckB=!1));this.board[h][t][1]=l,this.board[s][i][1]=o,this.changeColor();let r=!0;o=this.board[s][i][1],l=this.board[h][t][1],this.board[h][t][1]=o,this.board[s][i][1]=void 0;for(let i=0;i<this.ny&&r;i++)for(let s=0;s<this.nx&&r;s++)if(null!=this.board[i][s][1]&&this.board[i][s][1].name[0]==this.color)for(let t=0;t<this.ny&&r;t++)for(let h=0;h<this.nx&&r;h++)this.canMove(s,i,h,t,!1)&&(r=!1);this.board[h][t][1]=l,this.board[s][i][1]=o,this.changeColor();let a=[],c=[],d=!1,b=!1;o=this.board[s][i][1],l=this.board[h][t][1],this.board[h][t][1]=o,this.board[s][i][1]=void 0;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name.slice(0,1)==this.color&&"K"!=this.board[i][s][1].name.slice(1,2)&&a.push(this.board[i][s][1].name.slice(1,2));this.changeColor();for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name.slice(0,1)==this.color&&"K"!=this.board[i][s][1].name.slice(1,2)&&c.push(this.board[i][s][1].name.slice(1,2));this.changeColor(),this.board[h][t][1]=l,this.board[s][i][1]=o,a.length<=1&&(0==a.length?d=!0:"N"!=a[0]&&"B"!=a[0]||(d=!0)),c.length<=1&&(0==c.length?b=!0:"N"!=c[0]&&"B"!=c[0]||(b=!0)),d&&b&&(this.isPat=!0,r=!1,console.log("DRAW, NOT ENOUGH FIGURES!!!")),r&&(this.isUnderCheckW||this.isUnderCheckB?(this.isMate=!0,"w"==this.color?console.log("WHITE WON, IT'S MATE!!!"):console.log("BLACK WON, IT'S MATE!!!")):(this.isPat=!0,console.log("DRAW, IT'S PAT!!!"))),this.changeColor()}return l}underCheck(i,s){let t=!1;null==this.board[s][i][1]&&(t=!0,this.board[s][i][1]={});let h=this.board[s][i][1].name;this.board[s][i][1].name=this.color+"K";for(let e=0;e<this.ny;e++)for(let o=0;o<this.nx;o++)if((o!=i||s!=e)&&null!=this.board[e][o][1]&&this.board[e][o][1].name[0]!=this.color)if("P"==this.board[e][o][1].name[1]){if(this.canMove(o,e,i,s,!1,!0))return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,!0}else{if(this.changeColor(),this.canMove(o,e,i,s,!1,!0))return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,this.changeColor(),!0;this.changeColor()}return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,!1}changeColor(){"w"==this.color?this.color="b":this.color="w"}}class s{constructor(i,s,t,h,e=!1){this.img=document.createElement("img"),this.img.src=i,this.img.alt="Not loaded...",this.img.classList.add("figure"),this.width=h.x,this.name=i.slice(-6,-4),this.figure={},this.ignore=!1,h.y<1?this.height=h.x:this.height=h.y,null!=t?(this.posx=t.x,this.posy=t.y,s.ImageAttach(this)):console.log("position is out of range")}}function t(...i){return new s(...i)}class h{constructor(i,s){null==i?(this.x=0,this.y=0):null==s?"object"==typeof i?2==i.length?(this.x=i[0],this.y=i[1]):(this.x=i[0],this.y=i[0]):(this.x=i,this.y=0):(this.x=i,this.y=s)}}function e(...i){return new h(...i)}let o=new WebSocket("ws://192.168.30.32:3333");console.log("loaded");const n=document.getElementById("board"),l=document.getElementById("body");let r,a=!1,c=!1,d=e(),b=e(-1,-1),g=e(-1,-1),f=!1,y=e(-2,-2);e(-3,-3);let x={};function u(i,s,t){let h=s.split(" ");for(let s=0,e=h.length;s<e;s++)i.addEventListener(h[s],t,!1)}function w(){r=function(...s){return new i(...s)}(n,8);for(let i=0;i<r.nx;i++)t("./Figures/wP.png",r,e(i,1),e(r.cellSizeW));for(let i=0;i<r.nx;i++)t("./Figures/bP.png",r,e(i,r.ny-1-1),e(r.cellSizeW));t("./Figures/bN.png",r,e(1,r.ny-1),e(r.cellSizeW)),t("./Figures/bN.png",r,e(r.nx-2,r.ny-1),e(r.cellSizeW)),t("./Figures/wN.png",r,e(1,0),e(r.cellSizeW)),t("./Figures/wN.png",r,e(r.nx-2,0),e(r.cellSizeW)),t("./Figures/bR.png",r,e(0,r.ny-1),e(r.cellSizeW)),t("./Figures/bR.png",r,e(r.nx-1,r.ny-1),e(r.cellSizeW)),t("./Figures/wR.png",r,e(0,0),e(r.cellSizeW)),t("./Figures/wR.png",r,e(r.nx-1,0),e(r.cellSizeW)),t("./Figures/bB.png",r,e(2,r.ny-1),e(r.cellSizeW)),t("./Figures/bB.png",r,e(r.nx-3,r.ny-1),e(r.cellSizeW)),t("./Figures/wB.png",r,e(2,0),e(r.cellSizeW)),t("./Figures/wB.png",r,e(r.nx-3,0),e(r.cellSizeW)),t("./Figures/wQ.png",r,e(3,0),e(r.cellSizeW)),t("./Figures/bQ.png",r,e(3,r.ny-1),e(r.cellSizeW)),t("./Figures/wK.png",r,e(4,0),e(r.cellSizeW)),t("./Figures/bK.png",r,e(4,r.ny-1),e(r.cellSizeW)),u(n,"mousedown",p),u(l,"mousemove mouseup",p),u(l,"resize",v),r.setFigures();const s=()=>{r.DrawBoard(),f?r.DrawPosMoves(g,b,"#a22ac9","#f4b473","#8f8d8f"):a?r.DrawPosMoves(y,b):r.DrawPosMoves(b),r.DrawCheck("#f7e87dce","#797979ce"),r.DrawFigures(),r.DrawBorder(),window.requestAnimationFrame(s)};s()}function p(i){if("mousedown"==i.type)i.pageX>=r.offsetL&&i.pageX<=r.offsetL+r.w&&i.pageY>=r.offsetT&&i.pageY<=r.offsetT+r.h&&(!f||y.x==b.x&&y.y==b.y?r.board[b.y][b.x][0].length>1&&(a=!0,c=!1,y=e(b.x,b.y),d=e(i.clientY,i.clientX),r.board[b.y][b.x][1].posx+=(i.clientX-(r.board[b.y][b.x][1].posx+1)*r.cellSizeW-r.offsetL+r.cellSizeW/2)/r.cellSizeW,r.board[b.y][b.x][1].posy+=(i.clientY-(r.board[b.y][b.x][1].posy+1)*r.cellSizeH-r.offsetT+r.cellSizeH/2)/r.cellSizeH,r.board[b.y][b.x][1].posy=r.ny-r.board[b.y][b.x][1].posy-1):r.canMove(g.x,g.y,b.x,b.y)?(m(g,b),f=!1):null!=r.board[b.y][b.x][1]&&r.board[b.y][b.x][1].name[0]==r.color?(g=b,f=!0):f=!1);else if("mousemove"==i.type){if("board"==i.target.id.toString()){let s=e(i.clientY,i.clientX);b=r.GetPosBoard(s);try{a&&(b.x==y.x&&b.y==y.y||(c=!0))}catch(i){}}else a||(b=e(-1,-1),c=!0);a&&(r.board[y.y][y.x][1].posx+=(i.clientX-d.y)/r.cellSizeW,r.board[y.y][y.x][1].posy+=(d.x-i.clientY)/r.cellSizeH,d=e(i.clientY,i.clientX))}else if("mouseup"==i.type&&a)if(a=!1,"board"!=i.target.id.toString())r.board[y.y][y.x][1].posx=y.x,r.board[y.y][y.x][1].posy=r.ny-y.y-1,g=e(-1,-1),f=!1;else{let i=Math.floor(r.board[y.y][y.x][1].posx+.5),s=r.ny-Math.floor(r.board[y.y][y.x][1].posy+.5)-1;s==y.y&&i==y.x||!r.canMove(y.x,y.y,i,s)?(r.board[y.y][y.x][1].posx=y.x,r.board[y.y][y.x][1].posy=r.ny-y.y-1,c||f?(g=e(-1,-1),f=!1):(g=e(y.x,y.y),f=!0)):(m(y,e(i,s)),f=!1,g=e(-1,-1))}}function m(i,s){r.board[s.y][s.x][1]=r.board[i.y][i.x][1],r.board[i.y][i.x][1]=void 0;let t=r.board[i.y][i.x][0].slice(1);r.board[i.y][i.x][0]=r.board[i.y][i.x][0].slice(0,1),r.board[s.y][s.x][0]=r.board[s.y][s.x][0].slice(0,1),r.board[s.y][s.x][0]+=t,r.board[s.y][s.x][1].posx=s.x,r.board[s.y][s.x][1].posy=r.ny-s.y-1,x.event="new board",x.board=r.board,o.send(JSON.stringify(x))}function v(i){r.UpdateInfo(n,e(i.currentTarget.innerWidth,i.currentTarget.innerHeight))}window.onresize=v,o.onmessage=async i=>{!async function(i){"new board"===i.event?(console.log(i),console.log(i.board),r.NewBoard(i.board)):console.log(`Unknown event: ${i.event}`)}(JSON.parse(i.data))},window.addEventListener("load",(()=>{w()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2JvYXJkLmpzIiwiLi4vaW1hZ2VzLmpzIiwiLi4vdmVjMi5qcyIsIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlYzIsIEltYWdlIH0gZnJvbSBcIi4vbGliLmpzXCI7XHJcblxyXG5jbGFzcyBfQm9hcmQge1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBueCwgYmxhY2tjb2xvciA9IFwicmdiKDEyLDM2LDk4KVwiLCB3aGl0ZWNvbG9yID0gXCJyZ2IoMTc4IDE4OSwyMzEpXCIpIHtcclxuICAgICAgICB0aGlzLmNhbiA9IGNhbnZhcztcclxuICAgICAgICBsZXQgbnkgPSBueDtcclxuICAgICAgICBpZiAobnggPiA1KSB7XHJcbiAgICAgICAgICAgIHRoaXMubnggPSBueDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm54ID0gODtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG55IDwgMSkge1xyXG4gICAgICAgICAgICB0aGlzLm55ID0gdGhpcy5ueDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobnkgPiA1KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm55ID0gbnk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm55ID0gdGhpcy5ueDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJsYWNrY29sb3IgPSBibGFja2NvbG9yO1xyXG4gICAgICAgIHRoaXMud2hpdGVjb2xvciA9IHdoaXRlY29sb3I7XHJcbiAgICAgICAgdGhpcy5wcmV2eCA9IDA7XHJcbiAgICAgICAgdGhpcy5wcmV2eSA9IDA7XHJcbiAgICAgICAgdGhpcy5wcmV2V2lkdGggPSB0aGlzLmNhbi53aWR0aDtcclxuICAgICAgICB0aGlzLnByZXZIZWlnaHQgPSB0aGlzLmNhbi5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMub2Zmc2V0TCA9IHRoaXMuY2FuLm9mZnNldExlZnQ7XHJcblxyXG4gICAgICAgIHRoaXMub2Zmc2V0VCA9IHRoaXMuY2FuLm9mZnNldFRvcCArIDUwO1xyXG5cclxuICAgICAgICB0aGlzLncgPSB0aGlzLmNhbi53aWR0aDtcclxuICAgICAgICB0aGlzLmggPSB0aGlzLmNhbi5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb25zdFcgPSB0aGlzLmNhbi53aWR0aDtcclxuICAgICAgICB0aGlzLmNvbnN0SCA9IHRoaXMuY2FuLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNlbGxTaXplVyA9IHRoaXMudyAvIHRoaXMubng7XHJcbiAgICAgICAgdGhpcy5jZWxsU2l6ZUggPSB0aGlzLmggLyB0aGlzLm55O1xyXG4gICAgICAgIHRoaXMuYm9hcmQgPSBbXTtcclxuICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IFstMSwgLTFdO1xyXG4gICAgICAgIHRoaXMuaXNMb25nUCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5QYXNhbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbG9yID0gXCJ3XCI7XHJcbiAgICAgICAgdGhpcy5wb3NLaW5ncyA9IHt9O1xyXG4gICAgICAgIHRoaXMubGFzdFBpZWNlID0gdmVjMigtMiwgLTIpO1xyXG4gICAgICAgIHRoaXMuUG9zZXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5pc1VuZGVyQ2hlY2tCID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1VuZGVyQ2hlY2tXID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc01hdGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLm55OyB5KyspIHtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5XSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMubnk7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMubng7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCh4ICsgeSkgJSAyID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3RoaXMubnkgLSB5IC0gMV1beF0gPSBbXCJ3XCIsIHVuZGVmaW5lZF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbdGhpcy5ueSAtIHkgLSAxXVt4XSA9IFtcImJcIiwgdW5kZWZpbmVkXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBVcGRhdGVJbmZvKGNhbnZhcywgc2l6ZSkge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IHNpemUueDtcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gc2l6ZS55O1xyXG4gICAgICAgIGxldCBreCA9IDAsXHJcbiAgICAgICAgICAgIGt5ID0gMDtcclxuICAgICAgICBsZXQgZGlmZiA9IDA7XHJcbiAgICAgICAgaWYgKHdpZHRoIDwgdGhpcy53KSB7XHJcbiAgICAgICAgICAgIGt4ID0gTWF0aC5jZWlsKCh0aGlzLncgLSB3aWR0aCkgLyB0aGlzLm54KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhlaWdodCA8IHRoaXMuaCkge1xyXG4gICAgICAgICAgICBreSA9IE1hdGguY2VpbCgodGhpcy5oIC0gaGVpZ2h0KSAvIHRoaXMubnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaWZmID0gTWF0aC5tYXgoa3ggKiB0aGlzLm54LCBreSAqIHRoaXMubnkpO1xyXG4gICAgICAgIGlmIChkaWZmID09IDAgJiYgdGhpcy5wcmV2eCA+PSAwICYmIHRoaXMucHJldnkgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53IDwgdGhpcy5jb25zdFcgJiYgd2lkdGggPiB0aGlzLncpIHtcclxuICAgICAgICAgICAgICAgIGt4ID0gTWF0aC5jZWlsKCh3aWR0aCAtIHRoaXMudykgLyB0aGlzLm54KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5oIDwgdGhpcy5jb25zdEggJiYgaGVpZ2h0ID4gdGhpcy5oKSB7XHJcbiAgICAgICAgICAgICAgICBreSA9IE1hdGguY2VpbCgoaGVpZ2h0IC0gdGhpcy5oKSAvIHRoaXMubnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghKHRoaXMucHJldnggPT0gLTEgfHwgdGhpcy5wcmV2eSA9PSAtMSkpIHtcclxuICAgICAgICAgICAgICAgIGRpZmYgPSAtTWF0aC5taW4oTWF0aC5tYXgoa3ggKiB0aGlzLm54LCBreSAqIHRoaXMubnkpLCBNYXRoLm1pbihoZWlnaHQgLSB0aGlzLmgsIHdpZHRoIC0gdGhpcy53KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2FudmFzLndpZHRoIC09IGRpZmY7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCAtPSBkaWZmO1xyXG4gICAgICAgIGlmIChjYW52YXMud2lkdGggPiB0aGlzLmNvbnN0VyB8fCBjYW52YXMuaGVpZ2h0ID4gdGhpcy5jb25zdEgpIHtcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5jb25zdFc7XHJcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmNvbnN0SDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcmV2eCA9IHdpZHRoIC0gdGhpcy5wcmV2V2lkdGg7XHJcbiAgICAgICAgdGhpcy5wcmV2eSA9IGhlaWdodCAtIHRoaXMucHJldkhlaWdodDtcclxuICAgICAgICB0aGlzLnByZXZXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMucHJldkhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBpZiAoZGlmZiA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJldnggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZ5ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYW4gPSBjYW52YXM7XHJcblxyXG4gICAgICAgIHRoaXMudyA9IHRoaXMuY2FuLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaCA9IHRoaXMuY2FuLmhlaWdodDtcclxuICAgICAgICB0aGlzLm9mZnNldEwgPSB0aGlzLmNhbi5vZmZzZXRMZWZ0O1xyXG5cclxuICAgICAgICB0aGlzLmNlbGxTaXplVyA9IHRoaXMudyAvIHRoaXMubng7XHJcbiAgICAgICAgdGhpcy5jZWxsU2l6ZUggPSB0aGlzLmggLyB0aGlzLm55O1xyXG5cclxuICAgICAgICB0aGlzLm9mZnNldFQgPSB0aGlzLmNhbi5vZmZzZXRUb3AgKyA1MDtcclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMubnk7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMubng7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1beF1bMV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXS53aWR0aCA9IHRoaXMudyAvIHRoaXMubng7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXS5oZWlnaHQgPSB0aGlzLmggLyB0aGlzLm55O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuSW1hZ2VBdHRhY2godGhpcy5ib2FyZFt5XVt4XVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRHJhd0JvYXJkKCkge1xyXG4gICAgICAgIGxldCBjdHggPSB0aGlzLmNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5ueTsgeSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5ueDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5XVt4XVswXVswXSA9PSBcImJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmJsYWNrY29sb3I7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLndoaXRlY29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoKHggKiB0aGlzLncpIC8gdGhpcy5ueCwgKHkgKiB0aGlzLmgpIC8gdGhpcy5ueSwgKCh4ICsgMSkgKiB0aGlzLncpIC8gdGhpcy5ueCwgKCh5ICsgMSkgKiB0aGlzLmgpIC8gdGhpcy5ueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIERyYXdGaWd1cmVzKCkge1xyXG4gICAgICAgIGxldCBjdHggPSB0aGlzLmNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc01hdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IgPT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3RoaXMucG9zS2luZ3Mud1swXV1bdGhpcy5wb3NLaW5ncy53WzFdXVswXS5zbGljZSgyLCAzKSA9PSBcIktcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbdGhpcy5wb3NLaW5ncy53WzBdXVt0aGlzLnBvc0tpbmdzLndbMV1dWzBdID0gdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLndbMF1dW3RoaXMucG9zS2luZ3Mud1sxXV1bMF0uc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLndbMF1dW3RoaXMucG9zS2luZ3Mud1sxXV1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvd1MucG5nXCIsIHRoaXMsIHZlYzIodGhpcy5wb3NLaW5ncy53WzFdLCB0aGlzLm55IC0gdGhpcy5wb3NLaW5ncy53WzBdIC0gMSksIHZlYzIodGhpcy5jZWxsU2l6ZVcpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3RoaXMucG9zS2luZ3MuYlswXV1bdGhpcy5wb3NLaW5ncy5iWzFdXVswXS5zbGljZSgyLCAzKSA9PSBcIktcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbdGhpcy5wb3NLaW5ncy5iWzBdXVt0aGlzLnBvc0tpbmdzLmJbMV1dWzBdID0gdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLmJbMF1dW3RoaXMucG9zS2luZ3MuYlsxXV1bMF0uc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLmJbMF1dW3RoaXMucG9zS2luZ3MuYlsxXV1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvYlMucG5nXCIsIHRoaXMsIHZlYzIodGhpcy5wb3NLaW5ncy5iWzFdLCB0aGlzLm55IC0gdGhpcy5wb3NLaW5ncy5iWzBdIC0gMSksIHZlYzIodGhpcy5jZWxsU2l6ZVcpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1BhdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLndbMF1dW3RoaXMucG9zS2luZ3Mud1sxXV1bMF0uc2xpY2UoMiwgMykgPT0gXCJLXCIgJiYgdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLndbMF1dW3RoaXMucG9zS2luZ3Mud1sxXV1bMF0uc2xpY2UoMSwgMikgPT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbdGhpcy5wb3NLaW5ncy53WzBdXVt0aGlzLnBvc0tpbmdzLndbMV1dWzBdID0gdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLndbMF1dW3RoaXMucG9zS2luZ3Mud1sxXV1bMF0uc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3RoaXMucG9zS2luZ3Mud1swXV1bdGhpcy5wb3NLaW5ncy53WzFdXVsxXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIEltYWdlKFwiLi9GaWd1cmVzL3dTLnBuZ1wiLCB0aGlzLCB2ZWMyKHRoaXMucG9zS2luZ3Mud1sxXSwgdGhpcy5ueSAtIHRoaXMucG9zS2luZ3Mud1swXSAtIDEpLCB2ZWMyKHRoaXMuY2VsbFNpemVXKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3RoaXMucG9zS2luZ3MuYlswXV1bdGhpcy5wb3NLaW5ncy5iWzFdXVswXS5zbGljZSgyLCAzKSA9PSBcIktcIiAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLmJbMF1dW3RoaXMucG9zS2luZ3MuYlsxXV1bMF0uc2xpY2UoMSwgMikgPT0gXCJiXCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3RoaXMucG9zS2luZ3MuYlswXV1bdGhpcy5wb3NLaW5ncy5iWzFdXVswXSA9IHRoaXMuYm9hcmRbdGhpcy5wb3NLaW5ncy5iWzBdXVt0aGlzLnBvc0tpbmdzLmJbMV1dWzBdLnNsaWNlKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt0aGlzLnBvc0tpbmdzLmJbMF1dW3RoaXMucG9zS2luZ3MuYlsxXV1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBJbWFnZShcIi4vRmlndXJlcy9iUy5wbmdcIiwgdGhpcywgdmVjMih0aGlzLnBvc0tpbmdzLmJbMV0sIHRoaXMubnkgLSB0aGlzLnBvc0tpbmdzLmJbMF0gLSAxKSwgdmVjMih0aGlzLmNlbGxTaXplVykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMubnk7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMubng7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1beF1bMV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXS5pbWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0ucG9zeCAqIHRoaXMuY2VsbFNpemVXLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ueSAtIHRoaXMuYm9hcmRbeV1beF1bMV0ucG9zeSAtIDEpICogdGhpcy5jZWxsU2l6ZUgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0ud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0uaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgRHJhd0JvcmRlcigpIHtcclxuICAgICAgICBsZXQgY3R4ID0gdGhpcy5jYW4uZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcclxuICAgICAgICBjdHgubGluZVRvKHRoaXMudywgMCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLncsIDApO1xyXG4gICAgICAgIGN0eC5saW5lVG8odGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBjdHgubW92ZVRvKHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICBjdHgubGluZVRvKDAsIHRoaXMuaCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oMCwgdGhpcy5oKTtcclxuICAgICAgICBjdHgubGluZVRvKDAsIDApO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBEcmF3UG9zTW92ZXMocG9zLCBjdXJwb3MgPSB1bmRlZmluZWQsIHBvc2NvbG9yID0gXCIjYzIyOTU4XCIsIGVhdGNvbG9yID0gXCIjNzZlMDhjXCIsIG1vdmVjb2xvciA9IFwiI2UwNzY5M1wiKSB7XHJcbiAgICAgICAgaWYgKHBvcyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeDEgPSBwb3MueDtcclxuICAgICAgICBsZXQgeTEgPSBwb3MueTtcclxuICAgICAgICBpZiAoeDEgPT0gdW5kZWZpbmVkIHx8IHkxID09IHVuZGVmaW5lZCB8fCB4MSA8IDAgfHwgeTEgPCAwIHx8IHgxID49IHRoaXMubnggfHwgeTEgPj0gdGhpcy5ueSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjdHggPSB0aGlzLmNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGxldCBJc1NhbWUgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5sYXN0UGllY2UueCA+PSAwICYmIHRoaXMubGFzdFBpZWNlLnkgPj0gMCAmJiB0aGlzLmxhc3RQaWVjZS54IDwgdGhpcy5ueCAmJiB0aGlzLmxhc3RQaWVjZS55IDwgdGhpcy5ueSkge1xyXG4gICAgICAgICAgICBpZiAoeDEgPT0gdGhpcy5sYXN0UGllY2UueCAmJiB5MSA9PSB0aGlzLmxhc3RQaWVjZS55KSB7XHJcbiAgICAgICAgICAgICAgICBJc1NhbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Qb3Nlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5Qb3Nlcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxhc3RQaWVjZSA9IHZlYzIocG9zLngsIHBvcy55KTtcclxuICAgICAgICBpZiAoIUlzU2FtZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMubnk7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLm54OyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeSA9PSB5MSAmJiB4ID09IHgxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBwb3Njb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KCh4MSAqIHRoaXMudykgLyB0aGlzLm54LCAoeTEgKiB0aGlzLmgpIC8gdGhpcy5ueSwgdGhpcy53IC8gdGhpcy5ueCwgdGhpcy5oIC8gdGhpcy5ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUG9zZXMuYWRkKFtcIm9sZFwiLCB2ZWMyKHgxLCB5MSldKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5MV1beDFdWzFdICE9IHVuZGVmaW5lZCAmJiB0aGlzLmNhbk1vdmUoeDEsIHkxLCB4LCB5LCBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3N4LCBwb3N5LCBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1beF1bMV0gPT0gdW5kZWZpbmVkICYmICF0aGlzLmVuUGFzYW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHBvc2NvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBNYXRoLm1pbih0aGlzLncgLyB0aGlzLm54LCB0aGlzLmggLyB0aGlzLm55KSAvIDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zeCA9ICh4ICogdGhpcy53ICsgdGhpcy53IC8gMikgLyB0aGlzLm54IC0gYSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zeSA9ICh5ICogdGhpcy5oICsgdGhpcy5oIC8gMikgLyB0aGlzLm55IC0gYSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHBvc3gsIHBvc3ksIGEsIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUG9zZXMuYWRkKFtcIm5vcm1cIiwgdmVjMih4LCB5KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZWF0Y29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMudyAvIHRoaXMubng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSB0aGlzLmggLyB0aGlzLm55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3ggPSAoeCAqIHRoaXMudykgLyB0aGlzLm54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3kgPSAoeSAqIHRoaXMuaCkgLyB0aGlzLm55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChwb3N4LCBwb3N5LCBhLCBiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlBvc2VzLmFkZChbXCJlYXRcIiwgdmVjMih4LCB5KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHBvc3gsIHBvc3ksIGEsIGI7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLlBvc2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVswXSA9PSBcIm5vcm1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBwb3Njb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICBhID0gTWF0aC5taW4odGhpcy53IC8gdGhpcy5ueCwgdGhpcy5oIC8gdGhpcy5ueSkgLyA0O1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc3ggPSAoaXRlbVsxXS54ICogdGhpcy53ICsgdGhpcy53IC8gMikgLyB0aGlzLm54IC0gYSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zeSA9IChpdGVtWzFdLnkgKiB0aGlzLmggKyB0aGlzLmggLyAyKSAvIHRoaXMubnkgLSBhIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QocG9zeCwgcG9zeSwgYSwgYSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1bMF0gPT0gXCJlYXRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBlYXRjb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy53IC8gdGhpcy5ueDtcclxuICAgICAgICAgICAgICAgICAgICBiID0gdGhpcy5oIC8gdGhpcy5ueTtcclxuICAgICAgICAgICAgICAgICAgICBwb3N4ID0gKGl0ZW1bMV0ueCAqIHRoaXMudykgLyB0aGlzLm54O1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc3kgPSAoaXRlbVsxXS55ICogdGhpcy5oKSAvIHRoaXMubnk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHBvc3gsIHBvc3ksIGEsIGIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtWzBdID09IFwib2xkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcG9zY29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KChpdGVtWzFdLnggKiB0aGlzLncpIC8gdGhpcy5ueCwgKGl0ZW1bMV0ueSAqIHRoaXMuaCkgLyB0aGlzLm55LCB0aGlzLncgLyB0aGlzLm54LCB0aGlzLmggLyB0aGlzLm55KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VycG9zICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgeDIgPSBjdXJwb3MueDtcclxuICAgICAgICAgICAgbGV0IHkyID0gY3VycG9zLnk7XHJcbiAgICAgICAgICAgIGlmICh4MiA9PSB1bmRlZmluZWQgfHwgeTIgPT0gdW5kZWZpbmVkIHx8IHgyIDwgMCB8fCB5MiA8IDAgfHwgeDIgPj0gdGhpcy5ueCB8fCB5MiA+PSB0aGlzLm55IHx8ICh4MSA9PSB4MiAmJiB5MSA9PSB5MikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbW92ZWNvbG9yO1xyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoKHgyICogdGhpcy53KSAvIHRoaXMubngsICh5MiAqIHRoaXMuaCkgLyB0aGlzLm55LCB0aGlzLncgLyB0aGlzLm54LCB0aGlzLmggLyB0aGlzLm55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIERyYXdDaGVjayhDaGVja0NvbG9yID0gXCIjZjdlODdkY2VcIiwgRGVhdGhDb2xvciA9IFwiIzNlM2QzY2NlXCIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1VuZGVyQ2hlY2tCIHx8IHRoaXMuaXNVbmRlckNoZWNrVyB8fCB0aGlzLmlzUGF0KSB7XHJcbiAgICAgICAgICAgIGxldCBjdHggPSB0aGlzLmNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgbGV0IHBvcywgeDMsIHkzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1VuZGVyQ2hlY2tCKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnBvc0tpbmdzLmI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnBvc0tpbmdzLnc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeDMgPSBwb3NbMV07XHJcbiAgICAgICAgICAgIHkzID0gcG9zWzBdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc01hdGUpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBEZWF0aENvbG9yO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IENoZWNrQ29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUGF0KSB7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoKHgzICogdGhpcy53KSAvIHRoaXMubngsICh5MyAqIHRoaXMuaCkgLyB0aGlzLm55LCB0aGlzLncgLyB0aGlzLm54LCB0aGlzLmggLyB0aGlzLm55KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzUGF0KSB7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gRGVhdGhDb2xvcjtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMucG9zS2luZ3MuYjtcclxuICAgICAgICAgICAgICAgIHgzID0gcG9zWzFdO1xyXG4gICAgICAgICAgICAgICAgeTMgPSBwb3NbMF07XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoKHgzICogdGhpcy53KSAvIHRoaXMubngsICh5MyAqIHRoaXMuaCkgLyB0aGlzLm55LCB0aGlzLncgLyB0aGlzLm54LCB0aGlzLmggLyB0aGlzLm55KTtcclxuXHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnBvc0tpbmdzLnc7XHJcbiAgICAgICAgICAgICAgICB4MyA9IHBvc1sxXTtcclxuICAgICAgICAgICAgICAgIHkzID0gcG9zWzBdO1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KCh4MyAqIHRoaXMudykgLyB0aGlzLm54LCAoeTMgKiB0aGlzLmgpIC8gdGhpcy5ueSwgdGhpcy53IC8gdGhpcy5ueCwgdGhpcy5oIC8gdGhpcy5ueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZXRQb3NCb2FyZChILCBXKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBIICE9IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgaWYgKFcgPT0gdW5kZWZpbmVkIHx8IEggPT0gdW5kZWZpbmVkIHx8IFcgPCB0aGlzLm9mZnNldFQgfHwgVyA+IHRoaXMub2Zmc2V0VCArIHRoaXMudyB8fCBIIDwgdGhpcy5vZmZzZXRMIHx8IEggPiB0aGlzLm9mZnNldEwgKyB0aGlzLmgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZlYzIoTWF0aC5mbG9vcigoKEggLSB0aGlzLm9mZnNldEwpIC8gdGhpcy5oKSAqIHRoaXMubnkpLCBNYXRoLmZsb29yKCgoVyAtIHRoaXMub2Zmc2V0VCkgLyB0aGlzLncpICogdGhpcy5ueCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoSC54ID09IHVuZGVmaW5lZCB8fCBILnkgPT0gdW5kZWZpbmVkIHx8IEgueCA8IHRoaXMub2Zmc2V0VCB8fCBILnggPiB0aGlzLm9mZnNldFQgKyB0aGlzLncgfHwgSC55IDwgdGhpcy5vZmZzZXRMIHx8IEgueSA+IHRoaXMub2Zmc2V0TCArIHRoaXMuaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmVjMihNYXRoLmZsb29yKCgoSC55IC0gdGhpcy5vZmZzZXRMKSAvIHRoaXMuaCkgKiB0aGlzLm55KSwgTWF0aC5mbG9vcigoKEgueCAtIHRoaXMub2Zmc2V0VCkgLyB0aGlzLncpICogdGhpcy5ueCkpO1xyXG4gICAgfVxyXG5cclxuICAgIEdldFBvc1JlYWwoWSwgWCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgWSAhPSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChYID09IHVuZGVmaW5lZCB8fCBZID09IHVuZGVmaW5lZCB8fCBYIDwgMCB8fCBZIDwgMCB8fCBYID49IHRoaXMubnggfHwgWSA+PSB0aGlzLm55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2ZWMyKHRoaXMuaCAtIChZICsgMSkgKiB0aGlzLmNlbGxTaXplSCArIHRoaXMub2Zmc2V0VCwgWCAqIHRoaXMuY2VsbFNpemVXICsgdGhpcy5vZmZzZXRMKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFkueCA9PSB1bmRlZmluZWQgfHwgWS55ID09IHVuZGVmaW5lZCB8fCBZLnggPCAwIHx8IFkueSA8IDAgfHwgWS54ID49IHRoaXMubnggfHwgWS55ID49IHRoaXMubnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZlYzIodGhpcy5oIC0gKFkueSArIDEpICogdGhpcy5jZWxsU2l6ZUggKyB0aGlzLm9mZnNldFQsIFkueCAqIHRoaXMuY2VsbFNpemVXICsgdGhpcy5vZmZzZXRMKTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRQb3NSZWFsQm9hcmQoWSwgWCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgWSAhPSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChYID09IHVuZGVmaW5lZCB8fCBZID09IHVuZGVmaW5lZCB8fCBYIDwgMCB8fCBZIDwgMCB8fCBYID49IHRoaXMubnkgfHwgWSA+PSB0aGlzLm54KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2ZWMyKHRoaXMuaCAtIChZICsgMSkgKiB0aGlzLmNlbGxTaXplSCwgWCAqIHRoaXMuY2VsbFNpemVXKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFkueCA9PSB1bmRlZmluZWQgfHwgWS55ID09IHVuZGVmaW5lZCB8fCBZLnggPCAwIHx8IFkueSA8IDAgfHwgWS54ID49IHRoaXMubnkgfHwgWS55ID49IHRoaXMubngpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZlYzIodGhpcy5oIC0gKFkueSArIDEpICogdGhpcy5jZWxsU2l6ZUgsIFkueCAqIHRoaXMuY2VsbFNpemVXKTtcclxuICAgIH1cclxuXHJcbiAgICB0b1JldmVyc2VkKFBvcykge1xyXG4gICAgICAgIHJldHVybiB2ZWMyKFBvcy54LCB0aGlzLm55IC0gUG9zLnkgLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICBJbWFnZUF0dGFjaChJbWFnZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBwb3N4ID0gSW1hZ2UucG9zeDtcclxuICAgICAgICAgICAgbGV0IHBvc3kgPSB0aGlzLm55IC0gSW1hZ2UucG9zeSAtIDE7XHJcbiAgICAgICAgICAgIGxldCBhID0gdGhpcy5HZXRQb3NSZWFsQm9hcmQocG9zeCwgcG9zeSk7XHJcbiAgICAgICAgICAgIGlmIChhICE9IHVuZGVmaW5lZCAmJiB0aGlzLmJvYXJkW3Bvc3ldW3Bvc3hdWzBdLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoSW1hZ2UubmFtZVsxXSA9PSBcIktcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChJbWFnZS5uYW1lWzBdID09IFwiYlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zS2luZ3MuYiA9IFtwb3N5LCBwb3N4XTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc0tpbmdzLncgPSBbcG9zeSwgcG9zeF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtwb3N5XVtwb3N4XVsxXSA9IEltYWdlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtwb3N5XVtwb3N4XVswXSArPSBJbWFnZS5uYW1lO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgd3JvbmcgaW4gY29vcmRpbmF0ZXMuLi5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEZ1bmN0aW9uOiBcIkltYWdlQXR0YWNoXCI6ICR7ZXJyfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBOZXdCb2FyZChuZXdCb2FyZCkge1xyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5ueTsgeSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5ueDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3hdID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzBdID0gbmV3Qm9hcmRbeV1beF1bMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1beF1bMF0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0gPSBJbWFnZShgLi9GaWd1cmVzLyR7dGhpcy5ib2FyZFt5XVt4XVswXS5zbGljZSgxKX0ucG5nYCwgdGhpcywgdmVjMih4LCB0aGlzLm55IC0geSAtIDEpLCB2ZWMyKHRoaXMuY2VsbFNpemVXLCB0aGlzLmNlbGxTaXplSCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEZpZ3VyZXMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLm55OyB5KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLm54OyB4KyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3ldW3hdWzFdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlndXJlKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpZ3VyZSh4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXS5maWd1cmUubmFtZSA9IHRoaXMuYm9hcmRbeV1beF1bMV0ubmFtZVsxXTtcclxuICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdLmZpZ3VyZS5jb2xvciA9IHRoaXMuYm9hcmRbeV1beF1bMV0ubmFtZVswXTtcclxuICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdLmZpZ3VyZS5pc21vdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdLmZpZ3VyZS5pc0xvY2tlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrT25Nb3ZlKHgsIHkpIHtcclxuICAgICAgICBpZiAodGhpcy5ib2FyZFt5XVt4XVsxXSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5Nb3ZlKHgsIHksIHgyLCB5MiwgdG9tb3ZlID0gdHJ1ZSwgdG9jaGVjayA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IGZpZyA9IHRoaXMuYm9hcmRbeV1beF1bMV0uZmlndXJlO1xyXG4gICAgICAgIGxldCBhbnMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVuUGFzYW50ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGZpZy5jb2xvciA9PSB0aGlzLmNvbG9yIHx8IHRvY2hlY2spIHtcclxuICAgICAgICAgICAgaWYgKGZpZy5uYW1lID09IFwiUFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlnLmNvbG9yID09IFwid1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPT0geDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPT0geTIgKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja09uTW92ZSh4LCB5MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9tb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZy5pc21vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IFt4MiwgeTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9uZ1AgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lblBhc2FudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA9PSB5MiArIDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrT25Nb3ZlKHgsIHkyICsgMSkgJiYgdGhpcy5jaGVja09uTW92ZSh4LCB5MikgJiYgIWZpZy5pc21vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9tb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZy5pc21vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IFt4MiwgeTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9uZ1AgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuUGFzYW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4MiA9PSB4IC0gMSB8fCB4MiA9PSB4ICsgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPT0geTIgKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrT25Nb3ZlKHgyLCB5MikgJiYgdGhpcy5ib2FyZFt5Ml1beDJdWzFdLm5hbWVbMF0gPT0gXCJiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlnLmlzbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IFt4MiwgeTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvbmdQID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lblBhc2FudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY2hlY2tPbk1vdmUoeDIsIHkpICYmIHRoaXMubGFzdE1vdmVkWzBdID09IHgyICYmIHRoaXMubGFzdE1vdmVkWzFdID09IHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1beDJdWzFdLm5hbWVbMV0gPT0gXCJQXCIgJiYgdGhpcy5ib2FyZFt5XVt4Ml1bMV0ubmFtZVswXSA9PSBcImJcIiAmJiB0aGlzLmlzTG9uZ1ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b21vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWcuaXNtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IFt4MiwgeTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beDJdWzBdID0gdGhpcy5ib2FyZFt5XVt4Ml1bMF0uc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4Ml1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvbmdQID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuUGFzYW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4ID09IHgyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID09IHkyIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tPbk1vdmUoeCwgeTIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWcuaXNtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW92ZWQgPSBbeDIsIHkyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvbmdQID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5QYXNhbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHkgPT0geTIgLSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja09uTW92ZSh4LCB5MiAtIDEpICYmIHRoaXMuY2hlY2tPbk1vdmUoeCwgeTIpICYmICFmaWcuaXNtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWcuaXNtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW92ZWQgPSBbeDIsIHkyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvbmdQID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lblBhc2FudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeDIgPT0geCAtIDEgfHwgeDIgPT0geCArIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID09IHkyIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja09uTW92ZSh4MiwgeTIpICYmIHRoaXMuYm9hcmRbeTJdW3gyXVsxXS5uYW1lWzBdID09IFwid1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b21vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZy5pc21vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW92ZWQgPSBbeDIsIHkyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb25nUCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5QYXNhbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNoZWNrT25Nb3ZlKHgyLCB5KSAmJiB0aGlzLmxhc3RNb3ZlZFswXSA9PSB4MiAmJiB0aGlzLmxhc3RNb3ZlZFsxXSA9PSB5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3ldW3gyXVsxXS5uYW1lWzFdID09IFwiUFwiICYmIHRoaXMuYm9hcmRbeV1beDJdWzFdLm5hbWVbMF0gPT0gXCJ3XCIgJiYgdGhpcy5pc0xvbmdQKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9tb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlnLmlzbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW92ZWQgPSBbeDIsIHkyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3gyXVswXSA9IHRoaXMuYm9hcmRbeV1beDJdWzBdLnNsaWNlKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beDJdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb25nUCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lblBhc2FudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpZy5uYW1lID09IFwiTlwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZHggPSBNYXRoLmFicyh4IC0geDIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGR5ID0gTWF0aC5hYnMoeSAtIHkyKTtcclxuICAgICAgICAgICAgICAgIGlmICgoKGR4ID09IDEgJiYgZHkgPT0gMikgfHwgKGR4ID09IDIgJiYgZHkgPT0gMSkpICYmICh0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPT0gdW5kZWZpbmVkIHx8IHRoaXMuYm9hcmRbeTJdW3gyXVsxXS5uYW1lWzBdICE9IHRoaXMuY29sb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWcubmFtZSA9PSBcIlJcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbmxpbjtcclxuICAgICAgICAgICAgICAgIGlmICh4ID09IHgyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29ubGluID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gTWF0aC5taW4oeSwgeTIpICsgMTsgaSA8IE1hdGgubWF4KHksIHkyKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW2ldW3hdWzFdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubGluID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA9PSB5Mikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmxpbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IE1hdGgubWluKHgsIHgyKSArIDE7IGkgPCBNYXRoLm1heCh4LCB4Mik7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5XVtpXVsxXSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmxpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29ubGluICE9IHVuZGVmaW5lZCAmJiBjb25saW4gJiYgKHRoaXMuYm9hcmRbeTJdW3gyXVsxXSA9PSB1bmRlZmluZWQgfHwgdGhpcy5ib2FyZFt5Ml1beDJdWzFdLm5hbWVbMF0gIT0gdGhpcy5jb2xvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpZy5uYW1lID09IFwiQlwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZHggPSB4MiAtIHgsXHJcbiAgICAgICAgICAgICAgICAgICAgZHkgPSB5MiAtIHksXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZGlhZztcclxuICAgICAgICAgICAgICAgIGlmICgoZHggPT0gZHkgfHwgZHggPT0gLWR5KSAmJiBkeCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZGlhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBNYXRoLmFicyhkeCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5ICsgaSAqIE1hdGguc2lnbihkeSldW3ggKyBpICogTWF0aC5zaWduKGR4KV1bMV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaWFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZGlhZyAhPSB1bmRlZmluZWQgJiYgY29uZGlhZyAmJiAodGhpcy5ib2FyZFt5Ml1beDJdWzFdID09IHVuZGVmaW5lZCB8fCB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZVswXSAhPSB0aGlzLmNvbG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlnLm5hbWUgPT0gXCJRXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb25saW47XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA9PSB4Mikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmxpbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IE1hdGgubWluKHksIHkyKSArIDE7IGkgPCBNYXRoLm1heCh5LCB5Mik7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFtpXVt4XVsxXSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmxpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHkgPT0geTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25saW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBNYXRoLm1pbih4LCB4MikgKyAxOyBpIDwgTWF0aC5tYXgoeCwgeDIpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeV1baV1bMV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25saW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGR4ID0geDIgLSB4LFxyXG4gICAgICAgICAgICAgICAgICAgIGR5ID0geTIgLSB5LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpYWc7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGR4ID09IGR5IHx8IGR4ID09IC1keSkgJiYgZHggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgTWF0aC5hYnMoZHgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeSArIGkgKiBNYXRoLnNpZ24oZHkpXVt4ICsgaSAqIE1hdGguc2lnbihkeCldWzFdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGlhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY29uZGlhZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKChjb25saW4gIT0gdW5kZWZpbmVkICYmIGNvbmxpbikgfHwgKGNvbmRpYWcgIT0gdW5kZWZpbmVkICYmIGNvbmRpYWcpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPT0gdW5kZWZpbmVkIHx8IHRoaXMuYm9hcmRbeTJdW3gyXVsxXS5uYW1lWzBdICE9IHRoaXMuY29sb3IpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBhbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpZy5uYW1lID09IFwiS1wiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZHggPSB4MiAtIHgsXHJcbiAgICAgICAgICAgICAgICAgICAgZHkgPSB5MiAtIHk7XHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHgpIDw9IDEgJiYgTWF0aC5hYnMoZHkpIDw9IDEgJiYgIShkeCA9PSAwICYmIGR5ID09IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeTJdW3gyXVsxXSA9PSB1bmRlZmluZWQgfHwgdGhpcy5ib2FyZFt5Ml1beDJdWzFdLm5hbWVbMF0gIT0gdGhpcy5jb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZiA9IHRoaXMuYm9hcmRbeV1beF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2NoZWNrIHx8ICF0aGlzLnVuZGVyQ2hlY2soeDIsIHkyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdID0gZjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2hhdCBpcyBkb3duIGF0IG9uZSBsaW5lIGlzIHVudG91Y2hhYmxlISEhXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY29uY2hlY2sgPSBmYWxzZTtcclxuICAgICAgICBpZiAoZmlnLmNvbG9yID09IHRoaXMuY29sb3IgJiYgIXRvY2hlY2spIHtcclxuICAgICAgICAgICAgbGV0IHBvcztcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IgPT0gXCJiXCIpIHtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMucG9zS2luZ3MuYjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMucG9zS2luZ3MudztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgeTQgPSBwb3NbMF07XHJcbiAgICAgICAgICAgIGxldCB4NCA9IHBvc1sxXTtcclxuICAgICAgICAgICAgaWYgKCEoeCA9PSB4NCAmJiB5ID09IHk0KSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGEgPSB0aGlzLmJvYXJkW3kyXVt4Ml1bMV07XHJcbiAgICAgICAgICAgICAgICBsZXQgYiA9IHRoaXMuYm9hcmRbeV1beF1bMV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPSB0aGlzLmJvYXJkW3ldW3hdWzFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHkzID0gMDsgeTMgPCB0aGlzLm55OyB5MysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeDMgPSAwOyB4MyA8IHRoaXMubng7IHgzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeTNdW3gzXVsxXSAhPSB1bmRlZmluZWQgJiYgdGhpcy5ib2FyZFt5M11beDNdWzFdLm5hbWVbMF0gIT0gdGhpcy5jb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuTW92ZSh4MywgeTMsIHg0LCB5NCwgZmFsc2UsIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2hlY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXSA9IGI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPSBhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b21vdmUgJiYgYW5zICYmICFjb25jaGVjaykge1xyXG4gICAgICAgICAgICBpZiAoZmlnLm5hbWUgPT0gXCJLXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yID09IFwid1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NLaW5ncy53ID0gW3kyLCB4Ml07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zS2luZ3MuYiA9IFt5MiwgeDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBwb3M7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yID09IFwid1wiKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnBvc0tpbmdzLmI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnBvc0tpbmdzLnc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2hlY2tpbmcgb24gY2hlY2tcclxuXHJcbiAgICAgICAgICAgIGxldCB0bXAxID0gdGhpcy5ib2FyZFt5XVt4XVsxXTtcclxuICAgICAgICAgICAgbGV0IHRtcDIgPSB0aGlzLmJvYXJkW3kyXVt4Ml1bMV07XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbeTJdW3gyXVsxXSA9IHRtcDE7XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbk1vdmUoeDIsIHkyLCBwb3NbMV0sIHBvc1swXSwgZmFsc2UsIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xvciA9PSBcIndcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVbmRlckNoZWNrQiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVbmRlckNoZWNrVyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVW5kZXJDaGVja1cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNVbmRlckNoZWNrQiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghKHRoaXMuaXNVbmRlckNoZWNrQiB8fCB0aGlzLmlzVW5kZXJDaGVja1cpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5MyA9IDA7IHkzIDwgdGhpcy5ueTsgeTMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHgzID0gMDsgeDMgPCB0aGlzLm54OyB4MysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3kzXVt4M11bMV0gIT0gdW5kZWZpbmVkICYmIHRoaXMuYm9hcmRbeTNdW3gzXVsxXS5uYW1lWzBdID09IHRoaXMuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbk1vdmUoeDMsIHkzLCBwb3NbMV0sIHBvc1swXSwgZmFsc2UsIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IgPT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VuZGVyQ2hlY2tCID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVW5kZXJDaGVja1cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VuZGVyQ2hlY2tCID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VuZGVyQ2hlY2tCID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdG1wMjtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXSA9IHRtcDE7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBvbiBwYXRcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb2xvcigpO1xyXG4gICAgICAgICAgICBsZXQgUGF0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRtcDEgPSB0aGlzLmJvYXJkW3ldW3hdWzFdO1xyXG4gICAgICAgICAgICB0bXAyID0gdGhpcy5ib2FyZFt5Ml1beDJdWzFdO1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPSB0bXAxO1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkW3ldW3hdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5MyA9IDA7IHkzIDwgdGhpcy5ueSAmJiBQYXQ7IHkzKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHgzID0gMDsgeDMgPCB0aGlzLm54ICYmIFBhdDsgeDMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3kzXVt4M11bMV0gIT0gdW5kZWZpbmVkICYmIHRoaXMuYm9hcmRbeTNdW3gzXVsxXS5uYW1lWzBdID09IHRoaXMuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeTQgPSAwOyB5NCA8IHRoaXMubnkgJiYgUGF0OyB5NCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4NCA9IDA7IHg0IDwgdGhpcy5ueCAmJiBQYXQ7IHg0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW5Nb3ZlKHgzLCB5MywgeDQsIHk0LCBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbeTJdW3gyXVsxXSA9IHRtcDI7XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbeV1beF1bMV0gPSB0bXAxO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUNvbG9yKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBvbiBlbm91Z2ggZmlndXJlcyBmb3IgbWF0ZVxyXG4gICAgICAgICAgICBsZXQgRmlnID0gW107XHJcbiAgICAgICAgICAgIGxldCBGaWcyID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb24xID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb24yID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0bXAxID0gdGhpcy5ib2FyZFt5XVt4XVsxXTtcclxuICAgICAgICAgICAgdG1wMiA9IHRoaXMuYm9hcmRbeTJdW3gyXVsxXTtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdG1wMTtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHkzID0gMDsgeTMgPCB0aGlzLm55OyB5MysrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB4MyA9IDA7IHgzIDwgdGhpcy5ueDsgeDMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW3kzXVt4M11bMV0gIT0gdW5kZWZpbmVkICYmIHRoaXMuYm9hcmRbeTNdW3gzXVsxXS5uYW1lLnNsaWNlKDAsIDEpID09IHRoaXMuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeTNdW3gzXVsxXS5uYW1lLnNsaWNlKDEsIDIpICE9IFwiS1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWcucHVzaCh0aGlzLmJvYXJkW3kzXVt4M11bMV0ubmFtZS5zbGljZSgxLCAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlQ29sb3IoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeTMgPSAwOyB5MyA8IHRoaXMubnk7IHkzKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHgzID0gMDsgeDMgPCB0aGlzLm54OyB4MysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeTNdW3gzXVsxXSAhPSB1bmRlZmluZWQgJiYgdGhpcy5ib2FyZFt5M11beDNdWzFdLm5hbWUuc2xpY2UoMCwgMSkgPT0gdGhpcy5jb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5M11beDNdWzFdLm5hbWUuc2xpY2UoMSwgMikgIT0gXCJLXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpZzIucHVzaCh0aGlzLmJvYXJkW3kzXVt4M11bMV0ubmFtZS5zbGljZSgxLCAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb2xvcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdG1wMjtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5XVt4XVsxXSA9IHRtcDE7XHJcblxyXG4gICAgICAgICAgICBpZiAoRmlnLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoRmlnLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uMSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChGaWdbMF0gPT0gXCJOXCIgfHwgRmlnWzBdID09IFwiQlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbjEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKEZpZzIubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChGaWcyLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uMiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChGaWcyWzBdID09IFwiTlwiIHx8IEZpZzJbMF0gPT0gXCJCXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uMiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29uMSAmJiBjb24yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUGF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIFBhdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEUkFXLCBOT1QgRU5PVUdIIEZJR1VSRVMhISFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQ25lY2sgb24gZW5kIG9mIHRoZSBnYW1lXHJcblxyXG4gICAgICAgICAgICBpZiAoUGF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1VuZGVyQ2hlY2tXIHx8IHRoaXMuaXNVbmRlckNoZWNrQikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNNYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xvciA9PSBcIndcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldISVRFIFdPTiwgSVQnUyBNQVRFISEhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQkxBQ0sgV09OLCBJVCdTIE1BVEUhISFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUGF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRSQVcsIElUJ1MgUEFUISEhXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDaGFuZ2luZyBjb2xvclxyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUNvbG9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbnM7XHJcbiAgICB9XHJcblxyXG4gICAgdW5kZXJDaGVjayh4MiwgeTIpIHtcclxuICAgICAgICBsZXQgciA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHIgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGogPSB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZTtcclxuICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZSA9IHRoaXMuY29sb3IgKyBcIktcIjtcclxuICAgICAgICBmb3IgKGxldCB5MyA9IDA7IHkzIDwgdGhpcy5ueTsgeTMrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4MyA9IDA7IHgzIDwgdGhpcy5ueDsgeDMrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoeDMgPT0geDIgJiYgeTIgPT0geTMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbeTNdW3gzXVsxXSAhPSB1bmRlZmluZWQgJiYgdGhpcy5ib2FyZFt5M11beDNdWzFdLm5hbWVbMF0gIT0gdGhpcy5jb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFt5M11beDNdWzFdLm5hbWVbMV0gPT0gXCJQXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbk1vdmUoeDMsIHkzLCB4MiwgeTIsIGZhbHNlLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZSA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQ29sb3IoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbk1vdmUoeDMsIHkzLCB4MiwgeTIsIGZhbHNlLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZSA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUNvbG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUNvbG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkW3kyXVt4Ml1bMV0ubmFtZSA9IGo7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt5Ml1beDJdWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlQ29sb3IoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sb3IgPT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xvciA9IFwiYlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBcIndcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBCb2FyZCguLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gbmV3IF9Cb2FyZCguLi5hcmdzKTtcclxufVxyXG4iLCJjbGFzcyBfSW1hZ2Uge1xyXG4gICAgY29uc3RydWN0b3IodXJsLCBib2R5LCBwb3MsIHNpemUsIGJvcmRlciA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmltZy5zcmMgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5pbWcuYWx0ID0gXCJOb3QgbG9hZGVkLi4uXCI7XHJcbiAgICAgICAgdGhpcy5pbWcuY2xhc3NMaXN0LmFkZChcImZpZ3VyZVwiKTtcclxuICAgICAgICAvL3RoaXMuaW1nLnN0eWxlLnpJbmRleCA9IDI7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHNpemUueDtcclxuICAgICAgICB0aGlzLm5hbWUgPSB1cmwuc2xpY2UoLTYsIC00KTtcclxuICAgICAgICB0aGlzLmZpZ3VyZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuaWdub3JlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChzaXplLnkgPCAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS54O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS55O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBvc3ggPSBwb3MueDtcclxuICAgICAgICAgICAgdGhpcy5wb3N5ID0gcG9zLnk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5pbWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3RoaXMucG9zeH1weCwgJHt0aGlzLnBvc3l9cHgpYDtcclxuXHJcbiAgICAgICAgICAgIGlmIChib3JkZXIpIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYm9keS5JbWFnZUF0dGFjaCh0aGlzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBvc2l0aW9uIGlzIG91dCBvZiByYW5nZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBJbWFnZSguLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gbmV3IF9JbWFnZSguLi5hcmdzKTtcclxufVxyXG4iLCJjbGFzcyBfdmVjMiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICAgICAgaWYgKHggPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IDA7XHJcbiAgICAgICAgfSBlbHNlIGlmICh5ID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHggPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHgubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSB4WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IHhbMV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IHhbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0geFswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB2ZWMyKC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiBuZXcgX3ZlYzIoLi4uYXJncyk7XHJcbn1cclxuIiwiaW1wb3J0IHsgc2V0VGltZW91dCB9IGZyb20gXCJub2RlOnRpbWVyc1wiO1xyXG5pbXBvcnQgeyBCb2FyZCwgSW1hZ2UsIHZlYzIgfSBmcm9tIFwiLi9saWIuanNcIjtcclxuXHJcbmxldCBzb2NrZXQgPSBuZXcgV2ViU29ja2V0KFwid3M6Ly8xOTIuMTY4LjMwLjMyOjMzMzNcIik7XHJcblxyXG5jb25zb2xlLmxvZyhcImxvYWRlZFwiKTtcclxuY29uc3QgY2FuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKTtcclxuY29uc3QgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9keVwiKTtcclxuXHJcbi8vIG5weCByb2xsdXAgLWMgLS13YXRjaFxyXG5cclxubGV0IEJvYXIsXHJcbiAgICBJc0ZpZ3VyZUdvdCA9IGZhbHNlLFxyXG4gICAgSXNUcmF2ZWxsID0gZmFsc2UsXHJcbiAgICBvbGRQb3MgPSB2ZWMyKCksXHJcbiAgICBCb2FyZFBvID0gdmVjMigtMSwgLTEpLFxyXG4gICAgSXNMb2NrZWQgPSB2ZWMyKC0xLCAtMSksXHJcbiAgICBJc1RvdWNoTW9kZSA9IGZhbHNlLFxyXG4gICAgQm9hcmRQb09sZCA9IHZlYzIoLTIsIC0yKSxcclxuICAgIEJvYXJQb09sZE9sZCA9IHZlYzIoLTMsIC0zKSxcclxuICAgIG1lc3MgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGFkZExpc3RlbmVyTXVsdGkoZWxlbWVudCwgZXZlbnROYW1lcywgbGlzdGVuZXIpIHtcclxuICAgIGxldCBldmVudHMgPSBldmVudE5hbWVzLnNwbGl0KFwiIFwiKTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBpTGVuID0gZXZlbnRzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudHNbaV0sIGxpc3RlbmVyLCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICBCb2FyID0gQm9hcmQoY2FuLCA4KTtcclxuXHJcbiAgICAvLyBQYXduc1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQm9hci5ueDsgaSsrKSB7XHJcbiAgICAgICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvd1AucG5nXCIsIEJvYXIsIHZlYzIoaSwgMSksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEJvYXIubng7IGkrKykge1xyXG4gICAgICAgIEltYWdlKFwiLi9GaWd1cmVzL2JQLnBuZ1wiLCBCb2FyLCB2ZWMyKGksIEJvYXIubnkgLSAxIC0gMSksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBLbmlnaHRzXHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy9iTi5wbmdcIiwgQm9hciwgdmVjMigxLCBCb2FyLm55IC0gMSksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuICAgIEltYWdlKFwiLi9GaWd1cmVzL2JOLnBuZ1wiLCBCb2FyLCB2ZWMyKEJvYXIubnggLSAyLCBCb2FyLm55IC0gMSksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuICAgIEltYWdlKFwiLi9GaWd1cmVzL3dOLnBuZ1wiLCBCb2FyLCB2ZWMyKDEsIDApLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy93Ti5wbmdcIiwgQm9hciwgdmVjMihCb2FyLm54IC0gMiwgMCksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuXHJcbiAgICAvLyBSb29rc1xyXG4gICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvYlIucG5nXCIsIEJvYXIsIHZlYzIoMCwgQm9hci5ueSAtIDEpLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy9iUi5wbmdcIiwgQm9hciwgdmVjMihCb2FyLm54IC0gMSwgQm9hci5ueSAtIDEpLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy93Ui5wbmdcIiwgQm9hciwgdmVjMigwLCAwKSwgdmVjMihCb2FyLmNlbGxTaXplVykpO1xyXG4gICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvd1IucG5nXCIsIEJvYXIsIHZlYzIoQm9hci5ueCAtIDEsIDApLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcblxyXG4gICAgLy8gQmlzaG9wc1xyXG4gICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvYkIucG5nXCIsIEJvYXIsIHZlYzIoMiwgQm9hci5ueSAtIDEpLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy9iQi5wbmdcIiwgQm9hciwgdmVjMihCb2FyLm54IC0gMywgQm9hci5ueSAtIDEpLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy93Qi5wbmdcIiwgQm9hciwgdmVjMigyLCAwKSwgdmVjMihCb2FyLmNlbGxTaXplVykpO1xyXG4gICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvd0IucG5nXCIsIEJvYXIsIHZlYzIoQm9hci5ueCAtIDMsIDApLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcblxyXG4gICAgLy8gUXVlZW5zXHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy93US5wbmdcIiwgQm9hciwgdmVjMigzLCAwKSwgdmVjMihCb2FyLmNlbGxTaXplVykpO1xyXG4gICAgSW1hZ2UoXCIuL0ZpZ3VyZXMvYlEucG5nXCIsIEJvYXIsIHZlYzIoMywgQm9hci5ueSAtIDEpLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcblxyXG4gICAgLy8gS2luZ3NcclxuICAgIEltYWdlKFwiLi9GaWd1cmVzL3dLLnBuZ1wiLCBCb2FyLCB2ZWMyKDQsIDApLCB2ZWMyKEJvYXIuY2VsbFNpemVXKSk7XHJcbiAgICBJbWFnZShcIi4vRmlndXJlcy9iSy5wbmdcIiwgQm9hciwgdmVjMig0LCBCb2FyLm55IC0gMSksIHZlYzIoQm9hci5jZWxsU2l6ZVcpKTtcclxuXHJcbiAgICBhZGRMaXN0ZW5lck11bHRpKGNhbiwgXCJtb3VzZWRvd25cIiwgbW92ZUZ1bmN0aW9uKTtcclxuICAgIGFkZExpc3RlbmVyTXVsdGkoYm9keSwgXCJtb3VzZW1vdmUgbW91c2V1cFwiLCBtb3ZlRnVuY3Rpb24pO1xyXG4gICAgYWRkTGlzdGVuZXJNdWx0aShib2R5LCBcInJlc2l6ZVwiLCByZXNpemVGdW5jdGlvbik7XHJcblxyXG4gICAgQm9hci5zZXRGaWd1cmVzKCk7XHJcbiAgICBjb25zdCBkcmF3ID0gKCkgPT4ge1xyXG4gICAgICAgIEJvYXIuRHJhd0JvYXJkKCk7XHJcbiAgICAgICAgaWYgKElzVG91Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIEJvYXIuRHJhd1Bvc01vdmVzKElzTG9ja2VkLCBCb2FyZFBvLCBcIiNhMjJhYzlcIiwgXCIjZjRiNDczXCIsIFwiIzhmOGQ4ZlwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFJc0ZpZ3VyZUdvdCkge1xyXG4gICAgICAgICAgICBCb2FyLkRyYXdQb3NNb3ZlcyhCb2FyZFBvKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBCb2FyLkRyYXdQb3NNb3ZlcyhCb2FyZFBvT2xkLCBCb2FyZFBvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQm9hci5EcmF3Q2hlY2soXCIjZjdlODdkY2VcIiwgXCIjNzk3OTc5Y2VcIik7XHJcbiAgICAgICAgQm9hci5EcmF3RmlndXJlcygpO1xyXG4gICAgICAgIEJvYXIuRHJhd0JvcmRlcigpO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgZHJhdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtb3ZlRnVuY3Rpb24oZSkge1xyXG4gICAgaWYgKGUudHlwZSA9PSBcIm1vdXNlZG93blwiKSB7XHJcbiAgICAgICAgaWYgKGUucGFnZVggPj0gQm9hci5vZmZzZXRMICYmIGUucGFnZVggPD0gQm9hci5vZmZzZXRMICsgQm9hci53ICYmIGUucGFnZVkgPj0gQm9hci5vZmZzZXRUICYmIGUucGFnZVkgPD0gQm9hci5vZmZzZXRUICsgQm9hci5oKSB7XHJcbiAgICAgICAgICAgIGlmICghKElzVG91Y2hNb2RlICYmICEoQm9hcmRQb09sZC54ID09IEJvYXJkUG8ueCAmJiBCb2FyZFBvT2xkLnkgPT0gQm9hcmRQby55KSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChCb2FyLmJvYXJkW0JvYXJkUG8ueV1bQm9hcmRQby54XVswXS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSXNGaWd1cmVHb3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIElzVHJhdmVsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIEJvYXJkUG9PbGQgPSB2ZWMyKEJvYXJkUG8ueCwgQm9hcmRQby55KTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRQb3MgPSB2ZWMyKGUuY2xpZW50WSwgZS5jbGllbnRYKTtcclxuICAgICAgICAgICAgICAgICAgICBCb2FyLmJvYXJkW0JvYXJkUG8ueV1bQm9hcmRQby54XVsxXS5wb3N4ICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmNsaWVudFggLSAoQm9hci5ib2FyZFtCb2FyZFBvLnldW0JvYXJkUG8ueF1bMV0ucG9zeCArIDEpICogQm9hci5jZWxsU2l6ZVcgLSBCb2FyLm9mZnNldEwgKyBCb2FyLmNlbGxTaXplVyAvIDIpIC8gQm9hci5jZWxsU2l6ZVc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEJvYXIuYm9hcmRbQm9hcmRQby55XVtCb2FyZFBvLnhdWzFdLnBvc3kgKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuY2xpZW50WSAtIChCb2FyLmJvYXJkW0JvYXJkUG8ueV1bQm9hcmRQby54XVsxXS5wb3N5ICsgMSkgKiBCb2FyLmNlbGxTaXplSCAtIEJvYXIub2Zmc2V0VCArIEJvYXIuY2VsbFNpemVIIC8gMikgLyBCb2FyLmNlbGxTaXplSDtcclxuICAgICAgICAgICAgICAgICAgICBCb2FyLmJvYXJkW0JvYXJkUG8ueV1bQm9hcmRQby54XVsxXS5wb3N5ID0gQm9hci5ueSAtIEJvYXIuYm9hcmRbQm9hcmRQby55XVtCb2FyZFBvLnhdWzFdLnBvc3kgLSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKEJvYXIuY2FuTW92ZShJc0xvY2tlZC54LCBJc0xvY2tlZC55LCBCb2FyZFBvLngsIEJvYXJkUG8ueSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VGaWVsZHMoSXNMb2NrZWQsIEJvYXJkUG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIElzVG91Y2hNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEJvYXIuYm9hcmRbQm9hcmRQby55XVtCb2FyZFBvLnhdWzFdICE9IHVuZGVmaW5lZCAmJiBCb2FyLmJvYXJkW0JvYXJkUG8ueV1bQm9hcmRQby54XVsxXS5uYW1lWzBdID09IEJvYXIuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBJc0xvY2tlZCA9IEJvYXJkUG87XHJcbiAgICAgICAgICAgICAgICAgICAgSXNUb3VjaE1vZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBJc1RvdWNoTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJtb3VzZW1vdmVcIikge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5pZC50b1N0cmluZygpID09IFwiYm9hcmRcIikge1xyXG4gICAgICAgICAgICBsZXQgTW91c2VQbyA9IHZlYzIoZS5jbGllbnRZLCBlLmNsaWVudFgpO1xyXG4gICAgICAgICAgICBCb2FyZFBvID0gQm9hci5HZXRQb3NCb2FyZChNb3VzZVBvKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChJc0ZpZ3VyZUdvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKEJvYXJkUG8ueCA9PSBCb2FyZFBvT2xkLnggJiYgQm9hcmRQby55ID09IEJvYXJkUG9PbGQueSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSXNUcmF2ZWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIUlzRmlndXJlR290KSB7XHJcbiAgICAgICAgICAgICAgICBCb2FyZFBvID0gdmVjMigtMSwgLTEpO1xyXG4gICAgICAgICAgICAgICAgSXNUcmF2ZWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoSXNGaWd1cmVHb3QpIHtcclxuICAgICAgICAgICAgQm9hci5ib2FyZFtCb2FyZFBvT2xkLnldW0JvYXJkUG9PbGQueF1bMV0ucG9zeCArPSAoZS5jbGllbnRYIC0gb2xkUG9zLnkpIC8gQm9hci5jZWxsU2l6ZVc7XHJcbiAgICAgICAgICAgIEJvYXIuYm9hcmRbQm9hcmRQb09sZC55XVtCb2FyZFBvT2xkLnhdWzFdLnBvc3kgKz0gKG9sZFBvcy54IC0gZS5jbGllbnRZKSAvIEJvYXIuY2VsbFNpemVIO1xyXG4gICAgICAgICAgICBvbGRQb3MgPSB2ZWMyKGUuY2xpZW50WSwgZS5jbGllbnRYKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGUudHlwZSA9PSBcIm1vdXNldXBcIikge1xyXG4gICAgICAgIGlmIChJc0ZpZ3VyZUdvdCkge1xyXG4gICAgICAgICAgICBJc0ZpZ3VyZUdvdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuaWQudG9TdHJpbmcoKSAhPSBcImJvYXJkXCIpIHtcclxuICAgICAgICAgICAgICAgIEJvYXIuYm9hcmRbQm9hcmRQb09sZC55XVtCb2FyZFBvT2xkLnhdWzFdLnBvc3ggPSBCb2FyZFBvT2xkLng7XHJcbiAgICAgICAgICAgICAgICBCb2FyLmJvYXJkW0JvYXJkUG9PbGQueV1bQm9hcmRQb09sZC54XVsxXS5wb3N5ID0gQm9hci5ueSAtIEJvYXJkUG9PbGQueSAtIDE7XHJcbiAgICAgICAgICAgICAgICBJc0xvY2tlZCA9IHZlYzIoLTEsIC0xKTtcclxuICAgICAgICAgICAgICAgIElzVG91Y2hNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1weCA9IE1hdGguZmxvb3IoQm9hci5ib2FyZFtCb2FyZFBvT2xkLnldW0JvYXJkUG9PbGQueF1bMV0ucG9zeCArIDEgLyAyKSxcclxuICAgICAgICAgICAgICAgICAgICB0bXB5ID0gQm9hci5ueSAtIE1hdGguZmxvb3IoQm9hci5ib2FyZFtCb2FyZFBvT2xkLnldW0JvYXJkUG9PbGQueF1bMV0ucG9zeSArIDEgLyAyKSAtIDE7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yKEJvYXIuYm9hcmRbQm9hcmRQb09sZC55XVtCb2FyZFBvT2xkLnhdWzFdLnBvc3kgKyAxIC8gMilcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKEJvYXJkUG9PbGQueCwgQm9hcmRQb09sZC55LCB0bXB4LCB0bXB5KTtcclxuICAgICAgICAgICAgICAgIGlmICghKHRtcHkgPT0gQm9hcmRQb09sZC55ICYmIHRtcHggPT0gQm9hcmRQb09sZC54KSAmJiBCb2FyLmNhbk1vdmUoQm9hcmRQb09sZC54LCBCb2FyZFBvT2xkLnksIHRtcHgsIHRtcHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRmllbGRzKEJvYXJkUG9PbGQsIHZlYzIodG1weCwgdG1weSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIElzVG91Y2hNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgSXNMb2NrZWQgPSB2ZWMyKC0xLCAtMSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEJvYXIuYm9hcmRbQm9hcmRQb09sZC55XVtCb2FyZFBvT2xkLnhdWzFdLnBvc3ggPSBCb2FyZFBvT2xkLng7XHJcbiAgICAgICAgICAgICAgICAgICAgQm9hci5ib2FyZFtCb2FyZFBvT2xkLnldW0JvYXJkUG9PbGQueF1bMV0ucG9zeSA9IEJvYXIubnkgLSBCb2FyZFBvT2xkLnkgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNUcmF2ZWxsICYmICFJc1RvdWNoTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJc0xvY2tlZCA9IHZlYzIoQm9hcmRQb09sZC54LCBCb2FyZFBvT2xkLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJc1RvdWNoTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSXNMb2NrZWQgPSB2ZWMyKC0xLCAtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIElzVG91Y2hNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coZS50eXBlLCBlLnBhZ2VYLCBlLnBhZ2VZKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlRmllbGRzKE9sZFBvcywgTmV3UG9zKSB7XHJcbiAgICBCb2FyLmJvYXJkW05ld1Bvcy55XVtOZXdQb3MueF1bMV0gPSBCb2FyLmJvYXJkW09sZFBvcy55XVtPbGRQb3MueF1bMV07XHJcbiAgICBCb2FyLmJvYXJkW09sZFBvcy55XVtPbGRQb3MueF1bMV0gPSB1bmRlZmluZWQ7XHJcbiAgICBsZXQgbmFtZSA9IEJvYXIuYm9hcmRbT2xkUG9zLnldW09sZFBvcy54XVswXS5zbGljZSgxKTtcclxuICAgIEJvYXIuYm9hcmRbT2xkUG9zLnldW09sZFBvcy54XVswXSA9IEJvYXIuYm9hcmRbT2xkUG9zLnldW09sZFBvcy54XVswXS5zbGljZSgwLCAxKTtcclxuICAgIEJvYXIuYm9hcmRbTmV3UG9zLnldW05ld1Bvcy54XVswXSA9IEJvYXIuYm9hcmRbTmV3UG9zLnldW05ld1Bvcy54XVswXS5zbGljZSgwLCAxKTtcclxuICAgIEJvYXIuYm9hcmRbTmV3UG9zLnldW05ld1Bvcy54XVswXSArPSBuYW1lO1xyXG4gICAgQm9hci5ib2FyZFtOZXdQb3MueV1bTmV3UG9zLnhdWzFdLnBvc3ggPSBOZXdQb3MueDtcclxuICAgIEJvYXIuYm9hcmRbTmV3UG9zLnldW05ld1Bvcy54XVsxXS5wb3N5ID0gQm9hci5ueSAtIE5ld1Bvcy55IC0gMTtcclxuXHJcbiAgICBtZXNzLmV2ZW50ID0gXCJuZXcgYm9hcmRcIjtcclxuICAgIG1lc3MuYm9hcmQgPSBCb2FyLmJvYXJkO1xyXG5cclxuICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3MpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzaXplRnVuY3Rpb24oZSkge1xyXG4gICAgQm9hci5VcGRhdGVJbmZvKGNhbiwgdmVjMihlLmN1cnJlbnRUYXJnZXQuaW5uZXJXaWR0aCwgZS5jdXJyZW50VGFyZ2V0LmlubmVySGVpZ2h0KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlLmN1cnJlbnRUYXJnZXQuaW5uZXJIZWlnaHQsIGUuY3VycmVudFRhcmdldC5pbm5lcldpZHRoKTtcclxufVxyXG5cclxud2luZG93Lm9ucmVzaXplID0gcmVzaXplRnVuY3Rpb247XHJcblxyXG5mdW5jdGlvbiBpbml0aWFsaXplQ29tbXVuaWNhdGlvbigpIHtcclxuICAgIHNvY2tldC5vbm1lc3NhZ2UgPSBhc3luYyAobWVzcykgPT4ge1xyXG4gICAgICAgIHVuUGFyc2UoSlNPTi5wYXJzZShtZXNzLmRhdGEpKTtcclxuICAgICAgICAvLyBCb2FyLk5ld0JvYXJkKEpTT04ucGFyc2UodGV4dC5kYXRhKSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5pbml0aWFsaXplQ29tbXVuaWNhdGlvbigpO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gdW5QYXJzZShtZXNzKSB7XHJcbiAgICBzd2l0Y2ggKG1lc3MuZXZlbnQpIHtcclxuICAgICAgICBjYXNlIFwibmV3IGJvYXJkXCI6XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3MpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzLmJvYXJkKTtcclxuICAgICAgICAgICAgQm9hci5OZXdCb2FyZChtZXNzLmJvYXJkKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFVua25vd24gZXZlbnQ6ICR7bWVzcy5ldmVudH1gKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XHJcbiAgICBtYWluKCk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiX0JvYXJkIiwiY29uc3RydWN0b3IiLCJjYW52YXMiLCJueCIsImJsYWNrY29sb3IiLCJ3aGl0ZWNvbG9yIiwidGhpcyIsImNhbiIsIm55IiwicHJldngiLCJwcmV2eSIsInByZXZXaWR0aCIsIndpZHRoIiwicHJldkhlaWdodCIsImhlaWdodCIsIm9mZnNldEwiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VCIsIm9mZnNldFRvcCIsInciLCJoIiwiY29uc3RXIiwiY29uc3RIIiwiY2VsbFNpemVXIiwiY2VsbFNpemVIIiwiYm9hcmQiLCJsYXN0TW92ZWQiLCJpc0xvbmdQIiwiZW5QYXNhbnQiLCJjb2xvciIsInBvc0tpbmdzIiwibGFzdFBpZWNlIiwidmVjMiIsIlBvc2VzIiwiU2V0IiwiaXNVbmRlckNoZWNrQiIsImlzVW5kZXJDaGVja1ciLCJpc01hdGUiLCJ5IiwieCIsInVuZGVmaW5lZCIsIlVwZGF0ZUluZm8iLCJzaXplIiwia3giLCJreSIsImRpZmYiLCJNYXRoIiwiY2VpbCIsIm1heCIsIm1pbiIsIkltYWdlQXR0YWNoIiwiRHJhd0JvYXJkIiwiY3R4IiwiZ2V0Q29udGV4dCIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwic3Ryb2tlIiwiRHJhd0ZpZ3VyZXMiLCJzbGljZSIsIkltYWdlIiwiYiIsImlzUGF0IiwiZHJhd0ltYWdlIiwiaW1nIiwicG9zeCIsInBvc3kiLCJEcmF3Qm9yZGVyIiwibW92ZVRvIiwibGluZVRvIiwiRHJhd1Bvc01vdmVzIiwicG9zIiwiY3VycG9zIiwicG9zY29sb3IiLCJlYXRjb2xvciIsIm1vdmVjb2xvciIsIngxIiwieTEiLCJJc1NhbWUiLCJjbGVhciIsImEiLCJpdGVtIiwiYWRkIiwiY2FuTW92ZSIsIngyIiwieTIiLCJEcmF3Q2hlY2siLCJDaGVja0NvbG9yIiwiRGVhdGhDb2xvciIsIngzIiwieTMiLCJHZXRQb3NCb2FyZCIsIkgiLCJXIiwiZmxvb3IiLCJHZXRQb3NSZWFsIiwiWSIsIlgiLCJHZXRQb3NSZWFsQm9hcmQiLCJ0b1JldmVyc2VkIiwiUG9zIiwibGVuZ3RoIiwibmFtZSIsImNvbnNvbGUiLCJsb2ciLCJlcnIiLCJOZXdCb2FyZCIsIm5ld0JvYXJkIiwic2V0RmlndXJlcyIsImZpZ3VyZSIsImlzbW92ZSIsImlzTG9ja2VkIiwiY2hlY2tPbk1vdmUiLCJ0b21vdmUiLCJ0b2NoZWNrIiwiZmlnIiwiYW5zIiwiZHgiLCJhYnMiLCJkeSIsImNvbmxpbiIsImkiLCJjb25kaWFnIiwic2lnbiIsImYiLCJ1bmRlckNoZWNrIiwiY29uY2hlY2siLCJ5NCIsIng0IiwiY2hhbmdlQ29sb3IiLCJ0bXAxIiwidG1wMiIsIlBhdCIsIkZpZyIsIkZpZzIiLCJjb24xIiwiY29uMiIsInB1c2giLCJyIiwiaiIsIl9JbWFnZSIsInVybCIsImJvZHkiLCJib3JkZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJhbHQiLCJjbGFzc0xpc3QiLCJpZ25vcmUiLCJhcmdzIiwiX3ZlYzIiLCJzb2NrZXQiLCJXZWJTb2NrZXQiLCJnZXRFbGVtZW50QnlJZCIsIkJvYXIiLCJJc0ZpZ3VyZUdvdCIsIklzVHJhdmVsbCIsIm9sZFBvcyIsIkJvYXJkUG8iLCJJc0xvY2tlZCIsIklzVG91Y2hNb2RlIiwiQm9hcmRQb09sZCIsIm1lc3MiLCJhZGRMaXN0ZW5lck11bHRpIiwiZWxlbWVudCIsImV2ZW50TmFtZXMiLCJsaXN0ZW5lciIsImV2ZW50cyIsInNwbGl0IiwiaUxlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYWluIiwiQm9hcmQiLCJtb3ZlRnVuY3Rpb24iLCJyZXNpemVGdW5jdGlvbiIsImRyYXciLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlIiwidHlwZSIsInBhZ2VYIiwicGFnZVkiLCJjbGllbnRZIiwiY2xpZW50WCIsImNoYW5nZUZpZWxkcyIsInRhcmdldCIsImlkIiwidG9TdHJpbmciLCJNb3VzZVBvIiwidG1weCIsInRtcHkiLCJPbGRQb3MiLCJOZXdQb3MiLCJldmVudCIsInNlbmQiLCJKU09OIiwic3RyaW5naWZ5IiwiY3VycmVudFRhcmdldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm9ucmVzaXplIiwib25tZXNzYWdlIiwiYXN5bmMiLCJ1blBhcnNlIiwicGFyc2UiLCJkYXRhIl0sIm1hcHBpbmdzIjoieUJBRUEsTUFBTUEsRUFDRixXQUFBQyxDQUFZQyxFQUFRQyxFQUFJQyxFQUFhLGdCQUFpQkMsRUFBYSxvQkFDL0RDLEtBQUtDLElBQU1MLEVBQ1gsSUFBSU0sRUFBS0wsRUFFTEcsS0FBS0gsR0FETEEsRUFBSyxFQUNLQSxFQUVBLEVBR1ZHLEtBQUtFLEdBRExBLEVBQUssRUFDS0YsS0FBS0gsR0FFWEssRUFBSyxFQUNLQSxFQUVBRixLQUFLSCxHQUd2QkcsS0FBS0YsV0FBYUEsRUFDbEJFLEtBQUtELFdBQWFBLEVBQ2xCQyxLQUFLRyxNQUFRLEVBQ2JILEtBQUtJLE1BQVEsRUFDYkosS0FBS0ssVUFBWUwsS0FBS0MsSUFBSUssTUFDMUJOLEtBQUtPLFdBQWFQLEtBQUtDLElBQUlPLE9BRTNCUixLQUFLUyxRQUFVVCxLQUFLQyxJQUFJUyxXQUV4QlYsS0FBS1csUUFBVVgsS0FBS0MsSUFBSVcsVUFBWSxHQUVwQ1osS0FBS2EsRUFBSWIsS0FBS0MsSUFBSUssTUFDbEJOLEtBQUtjLEVBQUlkLEtBQUtDLElBQUlPLE9BQ2xCUixLQUFLZSxPQUFTZixLQUFLQyxJQUFJSyxNQUN2Qk4sS0FBS2dCLE9BQVNoQixLQUFLQyxJQUFJTyxPQUN2QlIsS0FBS2lCLFVB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
