var chsBundled=function(t){"use strict";class i{constructor(t,i,s,h,e=!1){this.img=document.createElement("img"),this.img.src=t,this.img.alt="Not loaded...",this.img.classList.add("figure"),this.width=h.x,this.name=t.slice(-6,-4),this.figure={},h.y<1?this.height=h.x:this.height=h.y,null!=s?(this.posx=s.x,this.posy=s.y,i.ImageAttach(this)):console.log("position is out of range")}}function s(...t){return new i(...t)}class h{constructor(t,i){null==t?(this.x=0,this.y=0):null==i?"object"==typeof t?2==t.length?(this.x=t[0],this.y=t[1]):(this.x=t[0],this.y=t[0]):(this.x=t,this.y=0):(this.x=t,this.y=i)}}function e(...t){return new h(...t)}class o{constructor(t,i,s=-1,h="rgb(12,36,98)",e="rgb(178 189,231)"){this.can=t,this.ctx=this.can.getContext("2d"),this.nx=i>5?i:8,this.ny=s<1?this.nx:s>5?s:this.nx,this.blackcolor=h,this.whitecolor=e,this.prevx=0,this.prevy=0,this.prevWidth=this.can.width,this.prevHeight=this.can.height,this.offsetL=this.can.offsetLeft,this.offsetT=this.can.offsetTop+50,this.w=this.can.width,this.h=this.can.height,this.constW=this.can.width,this.constH=this.can.height,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.board=[],this.lastMoved=[-1,-1],this.isLongP=!1,this.enPasant=!1,this.color="w",this.posKings={};for(let t=0;t<this.ny;t++)this.board[t]=[];for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)this.board[this.ny-t-1][i]=(i+t)%2==1?["w",void 0]:["b",void 0]}UpdateInfo(t,i){let s=i.x,h=i.y,e=0,o=0,n=0;s<this.w&&(e=Math.ceil((this.w-s)/this.nx)),h<this.h&&(o=Math.ceil((this.h-h)/this.ny)),n=Math.max(e*this.nx,o*this.ny),0==n&&this.prevx>=0&&this.prevy>=0&&(this.w<this.constW&&s>this.w&&(e=Math.ceil((s-this.w)/this.nx)),this.h<this.constH&&h>this.h&&(o=Math.ceil((h-this.h)/this.ny)),-1!=this.prevx&&-1!=this.prevy&&(n=-Math.min(Math.max(e*this.nx,o*this.ny),Math.min(h-this.h,s-this.w)))),t.width-=n,t.height-=n,(t.width>this.constW||t.height>this.constH)&&(t.width=this.constW,t.height=this.constH),this.prevx=s-this.prevWidth,this.prevy=h-this.prevHeight,this.prevWidth=s,this.prevHeight=h,0==n&&(this.prevx=0,this.prevy=0),this.can=t,this.ctx=this.can.getContext("2d"),this.w=this.can.width,this.h=this.can.height,this.offsetL=this.can.offsetLeft,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.offsetT=this.can.offsetTop+50;for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)null!=this.board[t][i][1]&&(this.board[t][i][1].width=this.w/this.nx,this.board[t][i][1].height=this.h/this.ny,this.ImageAttach(this.board[t][i][1]))}DrawBoard(){this.ctx=this.can.getContext("2d");for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)"b"==this.board[t][i][0][0]?this.ctx.fillStyle=this.blackcolor:this.ctx.fillStyle=this.whitecolor,this.ctx.fillRect(i*this.w/this.nx,t*this.h/this.ny,(i+1)*this.w/this.nx,(t+1)*this.h/this.ny)}DrawFigures(){for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)null!=this.board[t][i][1]&&this.ctx.drawImage(this.board[t][i][1].img,this.board[t][i][1].posx*this.cellSizeW,(this.ny-this.board[t][i][1].posy-1)*this.cellSizeH,this.board[t][i][1].width,this.board[t][i][1].height)}DrawBorder(){this.ctx.moveTo(0,0),this.ctx.lineTo(this.w,0),this.ctx.stroke(),this.ctx.moveTo(this.w,0),this.ctx.lineTo(this.w,this.h),this.ctx.stroke(),this.ctx.moveTo(this.w,this.h),this.ctx.lineTo(0,this.h),this.ctx.stroke(),this.ctx.moveTo(0,this.h),this.ctx.lineTo(0,0),this.ctx.stroke()}DrawPosMoves(t,i=void 0){if(null==t)return;let s=t.x,h=t.y;if(!(null==s||null==h||s<0||h<0||s>=this.nx||h>=this.ny)){for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)if(t==h&&i==s)this.ctx.fillStyle="#c22958",this.ctx.fillRect(s*this.w/this.nx,h*this.h/this.ny,this.w/this.nx,this.h/this.ny);else if(null!=this.board[h][s][1]&&this.canMove(s,h,i,t,!1)){let s,h,e;if(null!=this.board[t][i][1]||this.enPasant){this.ctx.fillStyle="#76e08c",e=this.w/this.nx;let o=this.h/this.ny;s=i*this.w/this.nx,h=t*this.h/this.ny,this.ctx.fillRect(s,h,e,o)}else this.ctx.fillStyle="#c22958",e=Math.min(this.w/this.nx,this.h/this.ny)/4,s=(i*this.w+this.w/2)/this.nx-e/2,h=(t*this.h+this.h/2)/this.ny-e/2,this.ctx.fillRect(s,h,e,e)}if(null!=i){let t=i.x,e=i.y;if(null==t||null==e||t<0||e<0||t>=this.nx||e>=this.ny||s==t&&h==e)return;this.ctx.fillStyle="#e07693",this.ctx.fillRect(t*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny)}}}GetPosBoard(t,i){if("object"!=typeof t){if(null==i||null==t||i<this.offsetT||i>this.offsetT+this.w||t<this.offsetL||t>this.offsetL+this.h)return;return e(Math.floor((t-this.offsetL)/this.h*this.ny),Math.floor((i-this.offsetT)/this.w*this.nx))}if(!(null==t.x||null==t.y||t.x<this.offsetT||t.x>this.offsetT+this.w||t.y<this.offsetL||t.y>this.offsetL+this.h))return e(Math.floor((t.y-this.offsetL)/this.h*this.ny),Math.floor((t.x-this.offsetT)/this.w*this.nx))}GetPosReal(t,i){if("object"!=typeof t){if(null==i||null==t||i<0||t<0||i>=this.nx||t>=this.ny)return;return e(this.h-(t+1)*this.cellSizeH+this.offsetT,i*this.cellSizeW+this.offsetL)}if(!(null==t.x||null==t.y||t.x<0||t.y<0||t.x>=this.nx||t.y>=this.ny))return e(this.h-(t.y+1)*this.cellSizeH+this.offsetT,t.x*this.cellSizeW+this.offsetL)}GetPosRealBoard(t,i){if("object"!=typeof t){if(null==i||null==t||i<0||t<0||i>=this.ny||t>=this.nx)return;return e(this.h-(t+1)*this.cellSizeH,i*this.cellSizeW)}if(!(null==t.x||null==t.y||t.x<0||t.y<0||t.x>=this.ny||t.y>=this.nx))return e(this.h-(t.y+1)*this.cellSizeH,t.x*this.cellSizeW)}toReversed(t){return e(t.x,this.ny-t.y-1)}ImageAttach(t){try{let i=t.posx,s=this.ny-t.posy-1,h=this.GetPosRealBoard(i,s);null!=h&&1==this.board[s][i][0].length?("K"==t.name[1]&&("b"==t.name[0]?this.posKings.b=[s,i]:this.posKings.w=[s,i]),this.board[s][i][1]=t,this.board[s][i][0]+=t.name):null==h&&console.log("Something wrong in coordinates...")}catch(t){console.log(`Function: "ImageAttach": ${t}`)}}NewBoard(t){for(let i=0;i<this.ny;i++)for(let h=0;h<this.nx;h++)this.board[i][h]=[],this.board[i][h][0]=t[i][h][0],this.board[i][h][1]=void 0,this.board[i][h][0].length>1&&(this.board[i][h][1]=s(`./Figures/${this.board[i][h][0].slice(1)}.png`,this,e(h,this.ny-i-1),e(this.cellSizeW,this.cellSizeH)))}setFigures(){for(let t=0;t<this.ny;t++)for(let i=0;i<this.nx;i++)null!=this.board[t][i][1]&&this.figure(i,t)}figure(t,i){this.board[i][t][1].figure.name=this.board[i][t][1].name[1],this.board[i][t][1].figure.color=this.board[i][t][1].name[0],this.board[i][t][1].figure.ismove=!1,this.board[i][t][1].figure.isLocked=!1}checkOnMove(t,i){return null==this.board[i][t][1]}canMove(t,i,s,h,e=!0,o=!1){let n=this.board[i][t][1].figure,l=!1;if(n.color==this.color||o)if("P"==n.name)"w"==n.color?t==s?i==h+1?this.checkOnMove(t,h)&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!1),this.enPasant=!1,l=!0):i==h+2&&this.checkOnMove(t,h+1)&&this.checkOnMove(t,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!0),this.enPasant=!1,l=!0):s!=t-1&&s!=t+1||i==h+1&&(this.checkOnMove(s,h)||"b"!=this.board[h][s][1].name[0]?this.checkOnMove(s,i)||this.lastMoved[0]!=s||this.lastMoved[1]!=i||"P"==this.board[i][s][1].name[1]&&"b"==this.board[i][s][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.board[i][s][0]=this.board[i][s][0].slice(0,1),this.board[i][s][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!1),this.enPasant=!1,l=!0)):t==s?i==h-1?this.checkOnMove(t,h)&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!1),this.enPasant=!1,l=!0):i==h-2&&this.checkOnMove(t,h-1)&&this.checkOnMove(t,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!0),this.enPasant=!1,l=!0):s!=t-1&&s!=t+1||i==h-1&&(this.checkOnMove(s,h)||"w"!=this.board[h][s][1].name[0]?this.checkOnMove(s,i)||this.lastMoved[0]!=s||this.lastMoved[1]!=i||"P"==this.board[i][s][1].name[1]&&"w"==this.board[i][s][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[s,h],this.board[i][s][0]=this.board[i][s][0].slice(0,1),this.board[i][s][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[s,h],this.isLongP=!1),this.enPasant=!1,l=!0));else if("N"==n.name){let e=Math.abs(t-s),o=Math.abs(i-h);!(1==e&&2==o||2==e&&1==o)||null!=this.board[h][s][1]&&this.board[h][s][1].name[0]==this.color||(l=!0)}else if("R"==n.name){let e;if(t==s){e=!0;for(let s=Math.min(i,h)+1;s<Math.max(i,h);s++)if(null!=this.board[s][t][1]){e=!1;break}}else if(i==h){e=!0;for(let h=Math.min(t,s)+1;h<Math.max(t,s);h++)if(null!=this.board[i][h][1]){e=!1;break}}null==e||!e||null!=this.board[h][s][1]&&this.board[h][s][1].name[0]==this.color||(l=!0)}else if("B"==n.name){let e,o=s-t,n=h-i;if((o==n||o==-n)&&0!=o){e=!0;for(let s=1;s<Math.abs(o);s++)null!=this.board[i+s*Math.sign(n)][t+s*Math.sign(o)][1]&&(e=!1)}null==e||!e||null!=this.board[h][s][1]&&this.board[h][s][1].name[0]==this.color||(l=!0)}else if("Q"==n.name){let e;if(t==s){e=!0;for(let s=Math.min(i,h)+1;s<Math.max(i,h);s++)if(null!=this.board[s][t][1]){e=!1;break}}else if(i==h){e=!0;for(let h=Math.min(t,s)+1;h<Math.max(t,s);h++)if(null!=this.board[i][h][1]){e=!1;break}}let o,n=s-t,a=h-i;if((n==a||n==-a)&&0!=n){o=!0;for(let s=1;s<Math.abs(n);s++)null!=this.board[i+s*Math.sign(a)][t+s*Math.sign(n)][1]&&(o=!1)}!(null!=e&&e||null!=o&&o)||null!=this.board[h][s][1]&&this.board[h][s][1].name[0]==this.color||(l=!0)}else if("K"==n.name){let e=s-t,n=h-i;Math.abs(e)<=1&&Math.abs(n)<=1&&(0!=e||0!=n)&&(null!=this.board[h][s][1]&&this.board[h][s][1].name[0]==this.color||!o&&this.underCheck(s,h)||(l=!0))}if("b"==this.color){let t=this.posKings.b,i=t.x,s=t.y;this.underCheck(s,i)&&(l=!1)}else{let t=this.posKings.w,i=t.x,s=t.y;this.underCheck(s,i)&&(l=!1)}return e&&l&&this.changeColor(),l}underCheck(t,i){let s=!1;null==this.board[i][t][1]&&(s=!0,this.board[i][t][1]={});let h=this.board[i][t][1].name;this.board[i][t][1].name=this.color+"K";for(let e=0;e<this.ny;e++)for(let o=0;o<this.nx;o++)if((o!=t||i!=e)&&null!=this.board[e][o][1]&&this.board[e][o][1].name[0]!=this.color)if("P"==this.board[e][o][1].name[1]){if(this.canMove(o,e,t,i,!1,!0))return s?this.board[i][t][1]=void 0:this.board[i][t][1].name=h,!0}else{if(this.changeColor(),this.canMove(o,e,t,i,!1,!0))return s?this.board[i][t][1]=void 0:this.board[i][t][1].name=h,this.changeColor(),!0;this.changeColor()}return s?this.board[i][t][1]=void 0:this.board[i][t][1].name=h,!1}changeColor(){"w"==this.color?this.color="b":this.color="w"}}return t.Board=function(...t){return new o(...t)},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
